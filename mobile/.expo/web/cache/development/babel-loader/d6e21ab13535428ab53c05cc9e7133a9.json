{"ast":null,"code":"import { NativeModules, Platform, Vibration } from 'react-native';\nconst VIBRATION_DURATION_MS = 100;\n/**\n * Notification Feedback Type\n * The type of notification feedback generated by a UINotificationFeedbackGenerator object.\n * https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype\n */\n\nexport var NotificationFeedbackType;\n\n(function (NotificationFeedbackType) {\n  /**\n   * A notification feedback type indicating that a task has completed successfully\n   */\n  NotificationFeedbackType[\"Success\"] = \"success\";\n  /**\n   * A notification feedback type indicating that a task has produced a warning\n   */\n\n  NotificationFeedbackType[\"Warning\"] = \"warning\";\n  /**\n   * A notification feedback type indicating that a task has failed\n   */\n\n  NotificationFeedbackType[\"Error\"] = \"error\";\n})(NotificationFeedbackType || (NotificationFeedbackType = {}));\n/**\n * Impact Feedback Style\n * The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object.\n * https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle\n */\n\n\nexport var ImpactFeedbackStyle;\n\n(function (ImpactFeedbackStyle) {\n  /**\n   * A collision between small, light user interface elements\n   */\n  ImpactFeedbackStyle[\"Light\"] = \"light\";\n  /**\n   * A collision between moderately sized user interface elements\n   */\n\n  ImpactFeedbackStyle[\"Medium\"] = \"medium\";\n  /**\n   * A collision between large, heavy user interface elements\n   */\n\n  ImpactFeedbackStyle[\"Heavy\"] = \"heavy\";\n})(ImpactFeedbackStyle || (ImpactFeedbackStyle = {}));\n/**\n * Triggers notification feedback.\n */\n\n\nexport function notification(type = NotificationFeedbackType.Success) {\n  if (Platform.OS === 'ios') {\n    NativeModules.ExponentHaptic.notification(type);\n  } else {\n    console.warn('`Expo.Haptic` is only available on iOS');\n    Vibration.vibrate(VIBRATION_DURATION_MS, false);\n  }\n}\n/**\n * Triggers impact feedback.\n */\n\nexport function impact(style = ImpactFeedbackStyle.Medium) {\n  if (Platform.OS === 'ios') {\n    NativeModules.ExponentHaptic.impact(style);\n  } else {\n    console.warn('`Expo.Haptic` is only available on iOS');\n    Vibration.vibrate(VIBRATION_DURATION_MS, false);\n  }\n}\n/**\n * Triggers selection feedback.\n */\n\nexport function selection() {\n  if (Platform.OS === 'ios') {\n    NativeModules.ExponentHaptic.selection();\n  } else {\n    console.warn('`Expo.Haptic` is only available on iOS');\n    Vibration.vibrate(VIBRATION_DURATION_MS, false);\n  }\n}","map":{"version":3,"sources":["../src/Haptic.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,QAAxB,EAAkC,SAAlC,QAAmD,cAAnD;AAEA,MAAM,qBAAqB,GAAG,GAA9B;AAEA;;;;;;AAKA,OAAA,IAAY,wBAAZ;;AAAA,CAAA,UAAY,wBAAZ,EAAoC;AAClC;;;AAGA,EAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA;;;;AAGA,EAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA;;;;AAGA,EAAA,wBAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACD,CAbD,EAAY,wBAAwB,KAAxB,wBAAwB,GAAA,EAAA,CAApC;AAeA;;;;;;;AAKA,OAAA,IAAY,mBAAZ;;AAAA,CAAA,UAAY,mBAAZ,EAA+B;AAC7B;;;AAGA,EAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA;;;;AAGA,EAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA;;;;AAGA,EAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACD,CAbD,EAAY,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAA/B;AAeA;;;;;AAGA,OAAM,SAAU,YAAV,CAAuB,IAAA,GAAiC,wBAAwB,CAAC,OAAjF,EAAwF;AAC5F,MAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,IAAA,aAAa,CAAC,cAAd,CAA6B,YAA7B,CAA0C,IAA1C;AACD,GAFD,MAEO;AACL,IAAA,OAAO,CAAC,IAAR,CAAa,wCAAb;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,qBAAlB,EAAyC,KAAzC;AACD;AACF;AAED;;;;AAGA,OAAM,SAAU,MAAV,CAAiB,KAAA,GAA6B,mBAAmB,CAAC,MAAlE,EAAwE;AAC5E,MAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,IAAA,aAAa,CAAC,cAAd,CAA6B,MAA7B,CAAoC,KAApC;AACD,GAFD,MAEO;AACL,IAAA,OAAO,CAAC,IAAR,CAAa,wCAAb;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,qBAAlB,EAAyC,KAAzC;AACD;AACF;AAED;;;;AAGA,OAAM,SAAU,SAAV,GAAmB;AACvB,MAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,IAAA,aAAa,CAAC,cAAd,CAA6B,SAA7B;AACD,GAFD,MAEO;AACL,IAAA,OAAO,CAAC,IAAR,CAAa,wCAAb;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,qBAAlB,EAAyC,KAAzC;AACD;AACF","sourcesContent":["import { NativeModules, Platform, Vibration } from 'react-native';\n\nconst VIBRATION_DURATION_MS = 100;\n\n/**\n * Notification Feedback Type\n * The type of notification feedback generated by a UINotificationFeedbackGenerator object.\n * https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype\n */\nexport enum NotificationFeedbackType {\n  /**\n   * A notification feedback type indicating that a task has completed successfully\n   */\n  Success = 'success',\n  /**\n   * A notification feedback type indicating that a task has produced a warning\n   */\n  Warning = 'warning',\n  /**\n   * A notification feedback type indicating that a task has failed\n   */\n  Error = 'error',\n}\n\n/**\n * Impact Feedback Style\n * The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object.\n * https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle\n */\nexport enum ImpactFeedbackStyle {\n  /**\n   * A collision between small, light user interface elements\n   */\n  Light = 'light',\n  /**\n   * A collision between moderately sized user interface elements\n   */\n  Medium = 'medium',\n  /**\n   * A collision between large, heavy user interface elements\n   */\n  Heavy = 'heavy',\n}\n\n/**\n * Triggers notification feedback.\n */\nexport function notification(type: NotificationFeedbackType = NotificationFeedbackType.Success) {\n  if (Platform.OS === 'ios') {\n    NativeModules.ExponentHaptic.notification(type);\n  } else {\n    console.warn('`Expo.Haptic` is only available on iOS');\n    Vibration.vibrate(VIBRATION_DURATION_MS, false);\n  }\n}\n\n/**\n * Triggers impact feedback.\n */\nexport function impact(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium) {\n  if (Platform.OS === 'ios') {\n    NativeModules.ExponentHaptic.impact(style);\n  } else {\n    console.warn('`Expo.Haptic` is only available on iOS');\n    Vibration.vibrate(VIBRATION_DURATION_MS, false);\n  }\n}\n\n/**\n * Triggers selection feedback.\n */\nexport function selection() {\n  if (Platform.OS === 'ios') {\n    NativeModules.ExponentHaptic.selection();\n  } else {\n    console.warn('`Expo.Haptic` is only available on iOS');\n    Vibration.vibrate(VIBRATION_DURATION_MS, false);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}