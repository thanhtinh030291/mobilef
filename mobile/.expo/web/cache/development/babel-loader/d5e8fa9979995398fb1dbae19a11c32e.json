{"ast":null,"code":"import { NativeModulesProxy, Platform } from 'expo-core';\nconst {\n  ExpoLocalization\n} = NativeModulesProxy;\n\nconst isObject = obj => obj && obj.constructor && obj.constructor === Object;\n\nclass LocaleStore {\n  constructor(locales) {\n    if (isObject(locales) === false || Object.keys(locales).length <= 1) {\n      throw new Error('Locales input must be an object and non-empty');\n    }\n\n    const copy = { ...locales\n    };\n    const allGivenLocales = new Set(Object.keys(copy));\n    let currentLocaleName = [...allGivenLocales][0];\n    const defaultLocale = copy[currentLocaleName];\n    const defaultLocaleName = currentLocaleName;\n    const defaultLocalePhrases = new Set(Object.keys(defaultLocale));\n    let currentLocale = defaultLocale;\n\n    const setLocaleHelper = (newLocaleName, cb) => {\n      if (allGivenLocales.has(newLocaleName) === false) {\n        if (__DEV__) {\n          const s = `${newLocaleName} is not a valid locale, known locales are ${[...allGivenLocales]}`;\n          console.error(s);\n        }\n      }\n\n      if (newLocaleName === currentLocaleName) {\n        if (__DEV__) {\n          console.warn('New Locale is the same as last, locale not changed');\n        }\n\n        return;\n      }\n\n      currentLocale = copy[newLocaleName];\n      currentLocaleName = newLocaleName;\n      cb && cb();\n    };\n\n    const localizationValueHelper = name => {\n      if (defaultLocalePhrases.has(name)) {\n        const result = currentLocale[name];\n\n        if (result !== undefined) {\n          return result !== undefined ? result : defaultLocale[name];\n        } else {\n          const fallback = defaultLocale[name];\n\n          if (fallback === undefined) {\n            if (__DEV__) {\n              let s = `Fallback locale ${defaultLocaleName} is missing a string value for ${name}`;\n              console.error(s);\n            }\n\n            return '';\n          }\n\n          return fallback;\n        }\n      }\n    };\n\n    if (Platform.OS === 'android') {\n      let localizedValues = new Set();\n\n      for (const values of Object.values(copy)) {\n        Object.keys(values).forEach(s => localizedValues.add(s));\n      }\n\n      const proxy = {};\n      Object.defineProperty(proxy, 'setLocale', {\n        get() {\n          return setLocaleHelper;\n        }\n\n      });\n      const methods = new Set(['setLocale']);\n\n      for (const name of localizedValues.keys()) {\n        if (methods.has(name)) {\n          throw new Error(`Cannot use ${name} as a locale name`);\n        }\n\n        Object.defineProperty(proxy, name, {\n          get() {\n            return localizationValueHelper(name);\n          }\n\n        });\n      }\n\n      return proxy;\n    } else if (Platform.OS === 'ios') {\n      const handlers = {\n        setLocale: setLocaleHelper\n      };\n      const methods = new Set(Object.keys(handlers));\n      return new Proxy(this, {\n        set() {\n          if (__DEV__) {\n            console.warn('Setting anything directly on the localization store is a no op');\n          }\n\n          return false;\n        },\n\n        get(target, name) {\n          if (typeof name !== 'string') {\n            return target[name];\n          } else {\n            if (defaultLocalePhrases.has(name)) {\n              return localizationValueHelper(name);\n            } else if (methods.has(name)) {\n              return handlers[name];\n            } else {\n              return target[name];\n            }\n          }\n        }\n\n      });\n    } else {\n      throw new Error(`Unsupported platform at moment for localization: ${Platform.OS}`);\n    }\n  }\n\n}\n\nfunction warnDeprecated(deprecated, replacement) {\n  console.warn(`Expo.DangerZone.Localization.${deprecated} is deprecated. Use \\`Expo.Localization.${replacement}\\` instead.`);\n}\n\nexport default { ...ExpoLocalization,\n\n  getCurrentDeviceCountryAsync() {\n    warnDeprecated('getCurrentDeviceCountryAsync()', 'country');\n    return ExpoLocalization.country;\n  },\n\n  getCurrentLocaleAsync() {\n    warnDeprecated('getCurrentLocaleAsync()', 'locale');\n    return ExpoLocalization.locale.replace('-', '_');\n  },\n\n  getCurrentTimeZoneAsync() {\n    warnDeprecated('getCurrentTimeZoneAsync()', 'timezone');\n    return ExpoLocalization.timezone;\n  },\n\n  getPreferredLocalesAsync() {\n    warnDeprecated('getPreferredLocalesAsync()', 'locales');\n    return ExpoLocalization.locales;\n  },\n\n  getISOCurrencyCodesAsync() {\n    warnDeprecated('getISOCurrencyCodesAsync()', 'isoCurrencyCodes');\n    return ExpoLocalization.isoCurrencyCodes;\n  },\n\n  LocaleStore\n};","map":{"version":3,"sources":["../src/Localization.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModulesProxy, Platform } from 'expo-core';\nconst { ExpoLocalization } = NativeModulesProxy;\n\nconst isObject = obj => obj && obj.constructor && obj.constructor === Object;\n\nclass LocaleStore {\n  constructor(locales) {\n    if (isObject(locales) === false || Object.keys(locales).length <= 1) {\n      throw new Error('Locales input must be an object and non-empty');\n    }\n    const copy = { ...locales };\n    const allGivenLocales = new Set(Object.keys(copy));\n    let currentLocaleName = [...allGivenLocales][0];\n    const defaultLocale = copy[currentLocaleName];\n    const defaultLocaleName = currentLocaleName;\n    const defaultLocalePhrases = new Set(Object.keys(defaultLocale));\n    let currentLocale = defaultLocale;\n\n    const setLocaleHelper = (newLocaleName, cb) => {\n      if (allGivenLocales.has(newLocaleName) === false) {\n        if (__DEV__) {\n          const s = `${newLocaleName} is not a valid locale, known locales are ${[\n            ...allGivenLocales,\n          ]}`;\n          console.error(s);\n        }\n      }\n      if (newLocaleName === currentLocaleName) {\n        if (__DEV__) {\n          console.warn('New Locale is the same as last, locale not changed');\n        }\n        return;\n      }\n      currentLocale = copy[newLocaleName];\n      currentLocaleName = newLocaleName;\n      cb && cb();\n    };\n    const localizationValueHelper = name => {\n      if (defaultLocalePhrases.has(name)) {\n        const result = currentLocale[name];\n        if (result !== undefined) {\n          return result !== undefined ? result : defaultLocale[name];\n        } else {\n          const fallback = defaultLocale[name];\n          if (fallback === undefined) {\n            if (__DEV__) {\n              let s = `Fallback locale ${defaultLocaleName} is missing a string value for ${name}`;\n              console.error(s);\n            }\n            return '';\n          }\n          return fallback;\n        }\n      }\n    };\n\n    if (Platform.OS === 'android') {\n      let localizedValues = new Set<string>();\n      for (const values of Object.values(copy)) {\n        Object.keys(values).forEach(s => localizedValues.add(s));\n      }\n      const proxy = {};\n      Object.defineProperty(proxy, 'setLocale', {\n        get() {\n          return setLocaleHelper;\n        },\n      });\n\n      const methods = new Set(['setLocale']);\n      for (const name of localizedValues.keys()) {\n        if (methods.has(name)) {\n          throw new Error(`Cannot use ${name} as a locale name`);\n        }\n        Object.defineProperty(proxy, name, {\n          get() {\n            return localizationValueHelper(name);\n          },\n        });\n      }\n      return proxy;\n    } else if (Platform.OS === 'ios') {\n      const handlers = { setLocale: setLocaleHelper };\n      const methods = new Set(Object.keys(handlers));\n      return new Proxy(this, {\n        set() {\n          if (__DEV__) {\n            console.warn('Setting anything directly on the localization store is a no op');\n          }\n          return false;\n        },\n        get(target, name) {\n          if (typeof name !== 'string') {\n            return target[name];\n          } else {\n            if (defaultLocalePhrases.has(name)) {\n              return localizationValueHelper(name);\n            } else if (methods.has(name)) {\n              return handlers[name];\n            } else {\n              return target[name];\n            }\n          }\n        },\n      });\n    } else {\n      throw new Error(`Unsupported platform at moment for localization: ${Platform.OS}`);\n    }\n  }\n}\n\nfunction warnDeprecated(deprecated, replacement) {\n  console.warn(\n    `Expo.DangerZone.Localization.${deprecated} is deprecated. Use \\`Expo.Localization.${replacement}\\` instead.`\n  );\n}\n\nexport default {\n  ...ExpoLocalization,\n  getCurrentDeviceCountryAsync() {\n    warnDeprecated('getCurrentDeviceCountryAsync()', 'country');\n    return ExpoLocalization.country;\n  },\n  getCurrentLocaleAsync() {\n    warnDeprecated('getCurrentLocaleAsync()', 'locale');\n    return ExpoLocalization.locale.replace('-', '_');\n  },\n  getCurrentTimeZoneAsync() {\n    warnDeprecated('getCurrentTimeZoneAsync()', 'timezone');\n    return ExpoLocalization.timezone;\n  },\n  getPreferredLocalesAsync() {\n    warnDeprecated('getPreferredLocalesAsync()', 'locales');\n    return ExpoLocalization.locales;\n  },\n  getISOCurrencyCodesAsync() {\n    warnDeprecated('getISOCurrencyCodesAsync()', 'isoCurrencyCodes');\n    return ExpoLocalization.isoCurrencyCodes;\n  },\n  LocaleStore,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}