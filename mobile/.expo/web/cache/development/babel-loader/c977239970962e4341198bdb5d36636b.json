{"ast":null,"code":"import AnimatedCond from './core/AnimatedCond';\nimport AnimatedSet from './core/AnimatedSet';\nimport AnimatedOperator from './core/AnimatedOperator';\nimport AnimatedStartClock from './core/AnimatedStartClock';\nimport AnimatedStopClock from './core/AnimatedStopClock';\nimport AnimatedClockTest from './core/AnimatedClockTest';\nimport AnimatedDebug from './core/AnimatedDebug';\nimport AnimatedCall from './core/AnimatedCall';\nimport AnimatedEvent from './core/AnimatedEvent';\nimport AnimatedAlways from './core/AnimatedAlways';\nimport AnimatedConcat from './core/AnimatedConcat';\nimport { adapt } from './utils';\n\nfunction operator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n\nexport const add = operator('add');\nexport const sub = operator('sub');\nexport const multiply = operator('multiply');\nexport const divide = operator('divide');\nexport const pow = operator('pow');\nexport const modulo = operator('modulo');\nexport const sqrt = operator('sqrt');\nexport const sin = operator('sin');\nexport const cos = operator('cos');\nexport const exp = operator('exp');\nexport const round = operator('round');\nexport const lessThan = operator('lessThan');\nexport const eq = operator('eq');\nexport const greaterThan = operator('greaterThan');\nexport const lessOrEq = operator('lessOrEq');\nexport const greaterOrEq = operator('greaterOrEq');\nexport const neq = operator('neq');\nexport const and = operator('and');\nexport const or = operator('or');\nexport const defined = operator('defined');\nexport const not = operator('not');\nexport const set = function (what, value) {\n  return new AnimatedSet(what, adapt(value));\n};\nexport const cond = function (cond, ifBlock, elseBlock) {\n  return new AnimatedCond(adapt(cond), adapt(ifBlock), elseBlock === undefined ? undefined : adapt(elseBlock));\n};\nexport const block = function (items) {\n  return adapt(items);\n};\nexport const call = function (args, func) {\n  return new AnimatedCall(args, func);\n};\nexport const debug = function (message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined'; // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell = global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([call([value], ([a]) => console.log(`${message} ${a}`)), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  } // Debugging is disabled in PROD\n\n\n  return value;\n};\nexport const startClock = function (clock) {\n  return new AnimatedStartClock(clock);\n};\nexport const always = function (item) {\n  return new AnimatedAlways(item);\n};\nexport const concat = function (...args) {\n  return new AnimatedConcat(args.map(adapt));\n};\nexport const stopClock = function (clock) {\n  return new AnimatedStopClock(clock);\n};\nexport const clockRunning = function (clock) {\n  return new AnimatedClockTest(clock);\n};\nexport const event = function (argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n};","map":{"version":3,"sources":["C:/xampp/htdocs/app/mobile/node_modules/react-native-reanimated/src/base.js"],"names":["AnimatedCond","AnimatedSet","AnimatedOperator","AnimatedStartClock","AnimatedStopClock","AnimatedClockTest","AnimatedDebug","AnimatedCall","AnimatedEvent","AnimatedAlways","AnimatedConcat","adapt","operator","name","args","map","add","sub","multiply","divide","pow","modulo","sqrt","sin","cos","exp","round","lessThan","eq","greaterThan","lessOrEq","greaterOrEq","neq","and","or","defined","not","set","what","value","cond","ifBlock","elseBlock","undefined","block","items","call","func","debug","message","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","global","Expo","Constants","appOwnership","a","console","log","startClock","clock","always","item","concat","stopClock","clockRunning","event","argMapping","config"],"mappings":"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","sourcesContent":["import AnimatedCond from './core/AnimatedCond';\nimport AnimatedSet from './core/AnimatedSet';\nimport AnimatedOperator from './core/AnimatedOperator';\nimport AnimatedStartClock from './core/AnimatedStartClock';\nimport AnimatedStopClock from './core/AnimatedStopClock';\nimport AnimatedClockTest from './core/AnimatedClockTest';\nimport AnimatedDebug from './core/AnimatedDebug';\nimport AnimatedCall from './core/AnimatedCall';\nimport AnimatedEvent from './core/AnimatedEvent';\nimport AnimatedAlways from './core/AnimatedAlways';\nimport AnimatedConcat from './core/AnimatedConcat';\n\nimport { adapt } from './utils';\n\nfunction operator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n\nexport const add = operator('add');\nexport const sub = operator('sub');\nexport const multiply = operator('multiply');\nexport const divide = operator('divide');\nexport const pow = operator('pow');\nexport const modulo = operator('modulo');\nexport const sqrt = operator('sqrt');\nexport const sin = operator('sin');\nexport const cos = operator('cos');\nexport const exp = operator('exp');\nexport const round = operator('round');\nexport const lessThan = operator('lessThan');\nexport const eq = operator('eq');\nexport const greaterThan = operator('greaterThan');\nexport const lessOrEq = operator('lessOrEq');\nexport const greaterOrEq = operator('greaterOrEq');\nexport const neq = operator('neq');\nexport const and = operator('and');\nexport const or = operator('or');\nexport const defined = operator('defined');\nexport const not = operator('not');\n\nexport const set = function(what, value) {\n  return new AnimatedSet(what, adapt(value));\n};\n\nexport const cond = function(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n};\n\nexport const block = function(items) {\n  return adapt(items);\n};\n\nexport const call = function(args, func) {\n  return new AnimatedCall(args, func);\n};\n\nexport const debug = function(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n};\n\nexport const startClock = function(clock) {\n  return new AnimatedStartClock(clock);\n};\n\nexport const always = function(item) {\n  return new AnimatedAlways(item);\n};\n\nexport const concat = function(...args) {\n  return new AnimatedConcat(args.map(adapt));\n};\n\nexport const stopClock = function(clock) {\n  return new AnimatedStopClock(clock);\n};\n\nexport const clockRunning = function(clock) {\n  return new AnimatedClockTest(clock);\n};\n\nexport const event = function(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n};\n"]},"metadata":{},"sourceType":"module"}