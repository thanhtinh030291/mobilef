{"ast":null,"code":"import { Constants } from 'expo-constants';\nimport { NativeModules, Platform } from 'react-native';\nconst Google = NativeModules.ExponentGoogle;\nexport async function logInAsync(config) {\n  let behavior = config.behavior;\n\n  if (!behavior) {\n    behavior = 'system';\n  } // Only standalone apps can use system login.\n\n\n  if (Constants.appOwnership !== 'standalone' && behavior === 'system' && Platform.OS === \"android\") {\n    behavior = 'web';\n  }\n\n  let scopes = config.scopes;\n\n  if (!scopes) {\n    scopes = ['profile', 'email'];\n  }\n\n  const androidClientId = Constants.appOwnership === 'standalone' ? config.androidStandaloneAppClientId : config.androidClientId;\n  const iosClientId = Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n  const logInResult = await Google.logInAsync({\n    androidClientId: androidClientId || config.clientId,\n    iosClientId: iosClientId || config.clientId,\n    webClientId: config.webClientId,\n    behavior,\n    scopes\n  });\n\n  if (behavior === 'web') {\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    let userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: {\n        Authorization: `Bearer ${logInResult.accessToken}`\n      }\n    });\n    let userInfo = await userInfoResponse.json();\n    return { ...logInResult,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email\n      }\n    };\n  } else {\n    return logInResult;\n  }\n}","map":{"version":3,"sources":["../src/Google.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,gBAA1B;AACA,SAAS,aAAT,EAAwB,QAAxB,QAAwC,cAAxC;AAEA,MAAM,MAAM,GAAG,aAAa,CAAC,cAA7B;AAiCA,OAAO,eAAe,UAAf,CAA0B,MAA1B,EAA6C;AAClD,MAAI,QAAQ,GAAG,MAAM,CAAC,QAAtB;;AACA,MAAI,CAAC,QAAL,EAAe;AACb,IAAA,QAAQ,GAAG,QAAX;AACD,GAJiD,CAMlD;;;AACA,MAAI,SAAS,CAAC,YAAV,KAA2B,YAA3B,IAA4C,QAAQ,KAAK,QAAb,IAAyB,QAAQ,CAAC,EAAT,KAAgB,SAAzF,EAAsG;AAClG,IAAA,QAAQ,GAAG,KAAX;AACH;;AAGD,MAAI,MAAM,GAAG,MAAM,CAAC,MAApB;;AACA,MAAI,CAAC,MAAL,EAAa;AACX,IAAA,MAAM,GAAG,CAAC,SAAD,EAAY,OAAZ,CAAT;AACD;;AAED,QAAM,eAAe,GACnB,SAAS,CAAC,YAAV,KAA2B,YAA3B,GACI,MAAM,CAAC,4BADX,GAEI,MAAM,CAAC,eAHb;AAIA,QAAM,WAAW,GACf,SAAS,CAAC,YAAV,KAA2B,YAA3B,GAA0C,MAAM,CAAC,wBAAjD,GAA4E,MAAM,CAAC,WADrF;AAGA,QAAM,WAAW,GAAG,MAAM,MAAM,CAAC,UAAP,CAAkB;AAC1C,IAAA,eAAe,EAAE,eAAe,IAAI,MAAM,CAAC,QADD;AAE1C,IAAA,WAAW,EAAE,WAAW,IAAI,MAAM,CAAC,QAFO;AAG1C,IAAA,WAAW,EAAE,MAAM,CAAC,WAHsB;AAI1C,IAAA,QAJ0C;AAK1C,IAAA;AAL0C,GAAlB,CAA1B;;AAQA,MAAI,QAAQ,KAAK,KAAjB,EAAwB;AACtB;AACA;AACA,QAAI,gBAAgB,GAAG,MAAM,KAAK,CAAC,2CAAD,EAA8C;AAC9E,MAAA,OAAO,EAAE;AAAE,QAAA,aAAa,EAAE,UAAU,WAAW,CAAC,WAAW;AAAlD;AADqE,KAA9C,CAAlC;AAGA,QAAI,QAAQ,GAAG,MAAM,gBAAgB,CAAC,IAAjB,EAArB;AACA,WAAO,EACL,GAAG,WADE;AAEL,MAAA,IAAI,EAAE;AACJ,QAAA,EAAE,EAAE,QAAQ,CAAC,EADT;AAEJ,QAAA,IAAI,EAAE,QAAQ,CAAC,IAFX;AAGJ,QAAA,SAAS,EAAE,QAAQ,CAAC,UAHhB;AAIJ,QAAA,UAAU,EAAE,QAAQ,CAAC,WAJjB;AAKJ,QAAA,QAAQ,EAAE,QAAQ,CAAC,OALf;AAMJ,QAAA,KAAK,EAAE,QAAQ,CAAC;AANZ;AAFD,KAAP;AAWD,GAlBD,MAkBO;AACL,WAAO,WAAP;AACD;AACF","sourcesContent":["import { Constants } from 'expo-constants';\nimport { NativeModules, Platform } from 'react-native';\n\nconst Google = NativeModules.ExponentGoogle;\n\ntype LogInConfig = {\n  androidClientId?: string,\n  androidStandaloneAppClientId?: string,\n  iosClientId?: string,\n  iosStandaloneAppClientId?: string,\n  webClientId?: string,\n  clientId?: string,\n  behavior?: 'system' | 'web',\n  scopes?: string[],\n};\n\ntype LogInResult =\n  | {\n      type: 'cancel',\n    }\n  | {\n      type: 'success',\n      accessToken?: string,\n      idToken: string | null,\n      refreshToken: string | null,\n      serverAuthCode: string | null,\n      user: {\n        id?: string,\n        name?: string,\n        givenName?: string,\n        familyName?: string,\n        photoUrl?: string,\n        email?: string,\n      },\n    };\n\nexport async function logInAsync(config: LogInConfig): Promise<LogInResult> {\n  let behavior = config.behavior;\n  if (!behavior) {\n    behavior = 'system';\n  }\n\n  // Only standalone apps can use system login.\n  if (Constants.appOwnership !== 'standalone' && (behavior === 'system' && Platform.OS === \"android\") ) {\n      behavior = 'web';\n  }\n  \n\n  let scopes = config.scopes;\n  if (!scopes) {\n    scopes = ['profile', 'email'];\n  }\n\n  const androidClientId =\n    Constants.appOwnership === 'standalone'\n      ? config.androidStandaloneAppClientId\n      : config.androidClientId;\n  const iosClientId =\n    Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n\n  const logInResult = await Google.logInAsync({\n    androidClientId: androidClientId || config.clientId,\n    iosClientId: iosClientId || config.clientId,\n    webClientId: config.webClientId,\n    behavior,\n    scopes,\n  });\n\n  if (behavior === 'web') {\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    let userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    let userInfo = await userInfoResponse.json();\n    return {\n      ...logInResult,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } else {\n    return logInResult;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}