{"ast":null,"code":"import { Constants } from 'expo-constants';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform, findNodeHandle } from 'react-native';\nconst ExponentAR = NativeModules.ExponentAR || {};\nconst emitter = new NativeEventEmitter(ExponentAR);\n/**\n * Tracking Configuration\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arconfiguration\n */\n\nexport var TrackingConfiguration;\n\n(function (TrackingConfiguration) {\n  /**\n   * Provides high-quality AR experiences that use the rear-facing camera precisely track a device's\n   * position and orientation and allow plane detection and hit testing.\n   */\n  TrackingConfiguration[\"World\"] = \"ARWorldTrackingConfiguration\";\n  /**\n   * Provides basic AR experiences that use the rear-facing camera and track only a device's\n   * orientation.\n   */\n\n  TrackingConfiguration[\"Orientation\"] = \"AROrientationTrackingConfiguration\";\n  /**\n   * Provides AR experiences that use the front-facing camera and track the movement and expressions\n   * of the user's face.\n   */\n\n  TrackingConfiguration[\"Face\"] = \"ARFaceTrackingConfiguration\";\n})(TrackingConfiguration || (TrackingConfiguration = {}));\n\nexport var DepthDataQuality;\n\n(function (DepthDataQuality) {\n  DepthDataQuality[\"Low\"] = \"AVDepthDataQualityLow\";\n  DepthDataQuality[\"High\"] = \"AVDepthDataQualityHigh\";\n})(DepthDataQuality || (DepthDataQuality = {}));\n\nexport var DepthDataAccuracy;\n\n(function (DepthDataAccuracy) {\n  DepthDataAccuracy[\"Absolute\"] = \"AVDepthDataAccuracyAbsolute\";\n  DepthDataAccuracy[\"Relative\"] = \"AVDepthDataAccuracyRelative\";\n})(DepthDataAccuracy || (DepthDataAccuracy = {}));\n\nexport var BlendShape;\n\n(function (BlendShape) {\n  BlendShape[\"BrowDownL\"] = \"browDown_L\";\n  BlendShape[\"BrowDownR\"] = \"browDown_R\";\n  BlendShape[\"BrowInnerUp\"] = \"browInnerUp\";\n  BlendShape[\"BrowOuterUpL\"] = \"browOuterUp_L\";\n  BlendShape[\"BrowOuterUpR\"] = \"browOuterUp_R\";\n  BlendShape[\"CheekPuff\"] = \"cheekPuff\";\n  BlendShape[\"CheekSquintL\"] = \"cheekSquint_L\";\n  BlendShape[\"CheekSquintR\"] = \"cheekSquint_R\";\n  BlendShape[\"EyeBlinkL\"] = \"eyeBlink_L\";\n  BlendShape[\"EyeBlinkR\"] = \"eyeBlink_R\";\n  BlendShape[\"EyeLookDownL\"] = \"eyeLookDown_L\";\n  BlendShape[\"EyeLookDownR\"] = \"eyeLookDown_R\";\n  BlendShape[\"EyeLookInL\"] = \"eyeLookIn_L\";\n  BlendShape[\"EyeLookInR\"] = \"eyeLookIn_R\";\n  BlendShape[\"EyeLookOutL\"] = \"eyeLookOut_L\";\n  BlendShape[\"EyeLookOutR\"] = \"eyeLookOut_R\";\n  BlendShape[\"EyeLookUpL\"] = \"eyeLookUp_L\";\n  BlendShape[\"EyeLookUpR\"] = \"eyeLookUp_R\";\n  BlendShape[\"EyeSquintL\"] = \"eyeSquint_L\";\n  BlendShape[\"EyeSquintR\"] = \"eyeSquint_R\";\n  BlendShape[\"EyeWideL\"] = \"eyeWide_L\";\n  BlendShape[\"EyeWideR\"] = \"eyeWide_R\";\n  BlendShape[\"JawForward\"] = \"jawForward\";\n  BlendShape[\"JawLeft\"] = \"jawLeft\";\n  BlendShape[\"JawOpen\"] = \"jawOpen\";\n  BlendShape[\"JawRight\"] = \"jawRight\";\n  BlendShape[\"MouthClose\"] = \"mouthClose\";\n  BlendShape[\"MouthDimpleL\"] = \"mouthDimple_L\";\n  BlendShape[\"MouthDimpleR\"] = \"mouthDimple_R\";\n  BlendShape[\"MouthFrownL\"] = \"mouthFrown_L\";\n  BlendShape[\"MouthFrownR\"] = \"mouthFrown_R\";\n  BlendShape[\"MouthFunnel\"] = \"mouthFunnel\";\n  BlendShape[\"MouthLeft\"] = \"mouthLeft\";\n  BlendShape[\"MouthLowerDownL\"] = \"mouthLowerDown_L\";\n  BlendShape[\"MouthLowerDownR\"] = \"mouthLowerDown_R\";\n  BlendShape[\"MouthPressL\"] = \"mouthPress_L\";\n  BlendShape[\"MouthPressR\"] = \"mouthPress_R\";\n  BlendShape[\"MouthPucker\"] = \"mouthPucker\";\n  BlendShape[\"MouthRight\"] = \"mouthRight\";\n  BlendShape[\"MouthRollLower\"] = \"mouthRollLower\";\n  BlendShape[\"MouthRollUpper\"] = \"mouthRollUpper\";\n  BlendShape[\"MouthShrugLower\"] = \"mouthShrugLower\";\n  BlendShape[\"MouthShrugUpper\"] = \"mouthShrugUpper\";\n  BlendShape[\"MouthSmileL\"] = \"mouthSmile_L\";\n  BlendShape[\"MouthSmileR\"] = \"mouthSmile_R\";\n  BlendShape[\"MouthStretchL\"] = \"mouthStretch_L\";\n  BlendShape[\"MouthStretchR\"] = \"mouthStretch_R\";\n  BlendShape[\"MouthUpperUpL\"] = \"mouthUpperUp_L\";\n  BlendShape[\"MouthUpperUpR\"] = \"mouthUpperUp_R\";\n  BlendShape[\"NoseSneerL\"] = \"noseSneer_L\";\n  BlendShape[\"NoseSneerR\"] = \"noseSneer_R\";\n})(BlendShape || (BlendShape = {}));\n\nexport var FaceAnchorProp;\n\n(function (FaceAnchorProp) {\n  FaceAnchorProp[\"Geometry\"] = \"geometry\";\n  FaceAnchorProp[\"BlendShapes\"] = \"blendShapes\";\n})(FaceAnchorProp || (FaceAnchorProp = {}));\n/**\n * Plane Detection\n * Options for whether and how ARKit detects flat surfaces in captured images.\n * https://developer.apple.com/documentation/arkit/arplanedetection\n */\n\n\nexport var PlaneDetection;\n\n(function (PlaneDetection) {\n  /**\n   * No plane detection is run\n   */\n  PlaneDetection[\"None\"] = \"none\";\n  /**\n   * Plane detection determines horizontal planes in the scene\n   */\n\n  PlaneDetection[\"Horizontal\"] = \"horizontal\";\n  /**\n   * Plane detection determines horizontal planes in the scene\n   */\n\n  PlaneDetection[\"Vertical\"] = \"vertical\";\n})(PlaneDetection || (PlaneDetection = {}));\n/**\n * Hit-Test Result Types\n * Possible types for specifying a hit-test search, or for the result of a hit-test search.\n * https://developer.apple.com/documentation/arkit/arhittestresulttype\n */\n\n\nexport var HitTestResultTypes;\n\n(function (HitTestResultTypes) {\n  /**\n   * Result type from intersecting the nearest feature point.\n   */\n  HitTestResultTypes[\"FeaturePoint\"] = \"featurePoint\";\n  /**\n   * Result type from intersecting a horizontal plane estimate, determined for the current frame.\n   */\n\n  HitTestResultTypes[\"HorizontalPlane\"] = \"horizontalPlane\";\n  /**\n   * Result type from intersecting a vertical plane estimate, determined for the current frame.\n   */\n\n  HitTestResultTypes[\"VerticalPlane\"] = \"verticalPlane\";\n  /**\n   * Result type from intersecting with an existing plane anchor.\n   */\n\n  HitTestResultTypes[\"ExistingPlane\"] = \"existingPlane\";\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * extent.\n   */\n\n  HitTestResultTypes[\"ExistingPlaneUsingExtent\"] = \"existingPlaneUsingExtent\";\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * geometry.\n   */\n\n  HitTestResultTypes[\"ExistingPlaneUsingGeometry\"] = \"existingPlaneUsingGeometry\";\n})(HitTestResultTypes || (HitTestResultTypes = {}));\n/**\n * World Alignment\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arworldalignment\n */\n\n\nexport var WorldAlignment;\n\n(function (WorldAlignment) {\n  /**\n   * Aligns the world with gravity that is defined by vector (0, -1, 0).\n   */\n  WorldAlignment[\"Gravity\"] = \"gravity\";\n  /**\n   * Aligns the world with gravity that is defined by the vector (0, -1, 0) and heading (w.r.t. true\n   * north) that is given by the vector (0, 0, -1).\n   */\n\n  WorldAlignment[\"GravityAndHeading\"] = \"gravityAndHeading\";\n  /**\n   * Aligns the world with the camera’s orientation.\n   */\n\n  WorldAlignment[\"AlignmentCamera\"] = \"alignmentCamera\";\n})(WorldAlignment || (WorldAlignment = {}));\n\nexport var EventType;\n\n(function (EventType) {\n  EventType[EventType[\"FrameDidUpdate\"] = ExponentAR.frameDidUpdate] = \"FrameDidUpdate\";\n  EventType[EventType[\"DidFailWithError\"] = ExponentAR.didFailWithError] = \"DidFailWithError\";\n  EventType[EventType[\"AnchorsDidUpdate\"] = ExponentAR.anchorsDidUpdate] = \"AnchorsDidUpdate\";\n  EventType[EventType[\"CameraDidChangeTrackingState\"] = ExponentAR.cameraDidChangeTrackingState] = \"CameraDidChangeTrackingState\";\n  EventType[EventType[\"SessionWasInterrupted\"] = ExponentAR.sessionWasInterrupted] = \"SessionWasInterrupted\";\n  EventType[EventType[\"SessionInterruptionEnded\"] = ExponentAR.sessionInterruptionEnded] = \"SessionInterruptionEnded\";\n})(EventType || (EventType = {}));\n\nexport var AnchorType;\n\n(function (AnchorType) {\n  AnchorType[\"Face\"] = \"ARFaceAnchor\";\n  AnchorType[\"Image\"] = \"ARImageAnchor\";\n  AnchorType[\"Plane\"] = \"ARPlaneAnchor\";\n  AnchorType[\"Anchor\"] = \"ARAnchor\";\n})(AnchorType || (AnchorType = {}));\n\nexport var AnchorEventType;\n\n(function (AnchorEventType) {\n  AnchorEventType[\"Add\"] = \"add\";\n  AnchorEventType[\"Update\"] = \"update\";\n  AnchorEventType[\"Remove\"] = \"remove\";\n})(AnchorEventType || (AnchorEventType = {}));\n\nexport var FrameAttribute;\n\n(function (FrameAttribute) {\n  FrameAttribute[\"Anchors\"] = \"anchors\";\n  FrameAttribute[\"RawFeaturePoints\"] = \"rawFeaturePoints\";\n  FrameAttribute[\"LightEstimation\"] = \"lightEstimation\";\n  FrameAttribute[\"CapturedDepthData\"] = \"capturedDepthData\";\n})(FrameAttribute || (FrameAttribute = {}));\n\nexport var TrackingState;\n\n(function (TrackingState) {\n  /** Tracking is not available. */\n  TrackingState[\"NotAvailable\"] = \"ARTrackingStateNotAvailable\";\n  /** Tracking is limited. See tracking reason for details. */\n\n  TrackingState[\"Limited\"] = \"ARTrackingStateLimited\";\n  /** Tracking is Normal. */\n\n  TrackingState[\"Normal\"] = \"ARTrackingStateNormal\";\n})(TrackingState || (TrackingState = {}));\n\nexport var TrackingStateReason;\n\n(function (TrackingStateReason) {\n  /** Tracking is not limited. */\n  TrackingStateReason[\"None\"] = \"ARTrackingStateReasonNone\";\n  /** Tracking is limited due to initialization in progress. */\n\n  TrackingStateReason[\"Initializing\"] = \"ARTrackingStateReasonInitializing\";\n  /** Tracking is limited due to a excessive motion of the camera. */\n\n  TrackingStateReason[\"ExcessiveMotion\"] = \"ARTrackingStateReasonExcessiveMotion\";\n  /** Tracking is limited due to a lack of features visible to the camera. */\n\n  TrackingStateReason[\"InsufficientFeatures\"] = \"ARTrackingStateReasonInsufficientFeatures\";\n  /** Tracking is limited due to a relocalization in progress. */\n\n  TrackingStateReason[\"Relocalizing\"] = \"ARTrackingStateReasonRelocalizing\";\n})(TrackingStateReason || (TrackingStateReason = {}));\n\nexport function getVersion() {\n  return ExponentAR.ARKitVersion;\n}\nconst AvailabilityErrorMessages = {\n  Simulator: `Cannot run EXGL in a simulator`,\n  ANineChip: `ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a`,\n  ARKitOnlyOnIOS: `ARKit can only run on an iOS device! This is a`\n};\nexport function isAvailable() {\n  if (!Constants.isDevice || // Prevent Simulators\n  // @ts-ignore\n  Platform.isTVOS || Platform.OS !== 'ios' || // Device is iOS\n  Constants.deviceYearClass < 2015 || // Device has A9 chip\n  !ExponentAR.isSupported || // ARKit is included in the build\n  !ExponentAR.startAsync // Older SDK versions (27 and lower) that are fully compatible\n  ) {\n      return false;\n    }\n\n  return true;\n}\nexport function getUnavailabilityReason() {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return `${AvailabilityErrorMessages.ARKitOnlyOnIOS} ${Platform.OS} device`;\n  } else if (Constants.deviceYearClass < 2015) {\n    return `${AvailabilityErrorMessages.ANineChip} ${Constants.deviceYearClass} device`;\n  }\n\n  return 'Unknown Reason';\n}\nexport function onFrameDidUpdate(listener) {\n  return _addListener(EventType.FrameDidUpdate, listener);\n}\nexport function onDidFailWithError(listener) {\n  return _addListener(EventType.DidFailWithError, listener);\n}\nexport function onAnchorsDidUpdate(listener) {\n  return _addListener(EventType.AnchorsDidUpdate, listener);\n}\nexport function onCameraDidChangeTrackingState(listener) {\n  return _addListener(EventType.CameraDidChangeTrackingState, listener);\n}\nexport function onSessionWasInterrupted(listener) {\n  return _addListener(EventType.SessionWasInterrupted, listener);\n}\nexport function onSessionInterruptionEnded(listener) {\n  return _addListener(EventType.SessionInterruptionEnded, listener);\n}\n\nfunction _addListener(eventType, event) {\n  return emitter.addListener(eventType, event);\n}\n\nexport function removeAllListeners(eventType) {\n  emitter.removeAllListeners(eventType);\n} // TODO: support multiple types (take an array or bit flags)\n\nexport function performHitTest(point, types) {\n  if (ExponentAR.performHitTest) {\n    return ExponentAR.performHitTest(point, types);\n  }\n\n  throw new Error(`AR hit testing is not supported on this device`);\n}\nexport async function setDetectionImagesAsync(images) {\n  if (ExponentAR.setDetectionImagesAsync) {\n    await ExponentAR.setDetectionImagesAsync(images);\n  }\n}\nexport function getCurrentFrame(attributes) {\n  if (ExponentAR.getCurrentFrame) {\n    return ExponentAR.getCurrentFrame(attributes);\n  }\n\n  throw new Error(`AR is not supported on this device`);\n}\nexport function getARMatrices(near, far) {\n  if (ExponentAR.getARMatrices) {\n    return ExponentAR.getARMatrices(near, far);\n  }\n\n  throw new Error(`AR is not supported on this device`);\n}\nexport async function stopAsync() {\n  if (ExponentAR.stopAsync) {\n    await ExponentAR.stopAsync();\n  }\n}\nexport async function startAsync(node, configuration) {\n  let handle = typeof node === 'number' ? node : _getNodeHandle(node);\n\n  if (ExponentAR.startAsync) {\n    return await ExponentAR.startAsync(handle, configuration);\n  }\n\n  throw new Error(`AR is not supported on this device`);\n}\n\nfunction _getNodeHandle(component) {\n  let handle = findNodeHandle(component);\n\n  if (handle === null) {\n    throw new Error(`Could not find the React node handle for the AR component: ${component}`);\n  }\n\n  return handle;\n}\n\nexport function reset() {\n  if (ExponentAR.reset) {\n    ExponentAR.reset();\n  }\n}\nexport function resume() {\n  if (ExponentAR.resume) {\n    ExponentAR.resume();\n  }\n}\nexport function pause() {\n  if (ExponentAR.pause) {\n    ExponentAR.pause();\n  }\n}\nexport async function setConfigurationAsync(configuration) {\n  if (ExponentAR.setConfigurationAsync) {\n    await ExponentAR.setConfigurationAsync(configuration);\n  }\n}\nexport function getProvidesAudioData() {\n  if (ExponentAR.getProvidesAudioData) {\n    return ExponentAR.getProvidesAudioData();\n  }\n\n  return false;\n}\nexport function setProvidesAudioData(providesAudioData) {\n  if (ExponentAR.setProvidesAudioData) {\n    ExponentAR.setProvidesAudioData(providesAudioData);\n  }\n}\nexport function setPlaneDetection(planeDetection) {\n  if (ExponentAR.setPlaneDetection) {\n    ExponentAR.setPlaneDetection(planeDetection);\n  }\n}\nexport function getPlaneDetection() {\n  if (ExponentAR.getPlaneDetection) {\n    return ExponentAR.getPlaneDetection();\n  }\n\n  throw new Error(`AR plane detection is not supported on this device`);\n}\nexport function getCameraTexture() {\n  if (ExponentAR.getCameraTexture) {\n    return ExponentAR.getCameraTexture();\n  }\n\n  throw new Error(`AR camera textures are not supported on this device`);\n}\nexport async function setWorldOriginAsync(matrix_float4x4) {\n  if (ExponentAR.setWorldOriginAsync) {\n    await ExponentAR.setWorldOriginAsync(matrix_float4x4);\n  }\n}\nexport function setLightEstimationEnabled(isLightEstimationEnabled) {\n  if (ExponentAR.setLightEstimationEnabled) {\n    ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);\n  }\n}\nexport function getLightEstimationEnabled() {\n  if (ExponentAR.getLightEstimationEnabled) {\n    return ExponentAR.getLightEstimationEnabled();\n  }\n\n  return false;\n}\nexport function setAutoFocusEnabled(isAutoFocusEnabled) {\n  if (ExponentAR.setAutoFocusEnabled) {\n    ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);\n  }\n}\nexport function getAutoFocusEnabled() {\n  if (ExponentAR.getAutoFocusEnabled) {\n    return ExponentAR.getAutoFocusEnabled();\n  }\n\n  return false;\n}\nexport function setWorldAlignment(worldAlignment) {\n  if (ExponentAR.setWorldAlignment) {\n    ExponentAR.setWorldAlignment(worldAlignment);\n  }\n}\nexport function getWorldAlignment() {\n  if (ExponentAR.getWorldAlignment) {\n    return ExponentAR.getWorldAlignment();\n  }\n\n  throw new Error(`AR world alignment is not supported on this device`);\n}\nexport function isConfigurationAvailable(configuration) {\n  const {\n    width,\n    height\n  } = Dimensions.get('window'); // @ts-ignore: re-evaluate this for the new iPhones (2018)\n\n  const isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n\n  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {\n    return true;\n  }\n\n  return !!ExponentAR[configuration];\n}\nexport function getSupportedVideoFormats(configuration) {\n  const videoFormats = {\n    [TrackingConfiguration.World]: 'WorldTrackingVideoFormats',\n    [TrackingConfiguration.Orientation]: 'OrientationTrackingVideoFormats',\n    [TrackingConfiguration.Face]: 'FaceTrackingVideoFormats'\n  };\n  const videoFormat = videoFormats[configuration];\n  return ExponentAR[videoFormat] || [];\n}\nexport function isFrontCameraAvailable() {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\nexport function isRearCameraAvailable() {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}","map":{"version":3,"sources":["../src/AR.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from 'expo-constants';\nimport * as React from 'react';\nimport {\n  Dimensions,\n  NativeEventEmitter,\n  NativeModules,\n  Platform,\n  EmitterSubscription,\n  findNodeHandle,\n} from 'react-native';\n\nconst ExponentAR = NativeModules.ExponentAR || {};\n\nconst emitter = new NativeEventEmitter(ExponentAR);\n\n/**\n * Tracking Configuration\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arconfiguration\n */\nexport enum TrackingConfiguration {\n  /**\n   * Provides high-quality AR experiences that use the rear-facing camera precisely track a device's\n   * position and orientation and allow plane detection and hit testing.\n   */\n  World = 'ARWorldTrackingConfiguration',\n  /**\n   * Provides basic AR experiences that use the rear-facing camera and track only a device's\n   * orientation.\n   */\n  Orientation = 'AROrientationTrackingConfiguration',\n  /**\n   * Provides AR experiences that use the front-facing camera and track the movement and expressions\n   * of the user's face.\n   */\n  Face = 'ARFaceTrackingConfiguration',\n}\n\nexport enum DepthDataQuality {\n  Low = 'AVDepthDataQualityLow',\n  High = 'AVDepthDataQualityHigh',\n}\n\nexport enum DepthDataAccuracy {\n  Absolute = 'AVDepthDataAccuracyAbsolute',\n  Relative = 'AVDepthDataAccuracyRelative',\n}\n\nexport type Size = {\n  width: number;\n  height: number;\n};\n\nexport type Vector3 = {\n  x: number;\n  y: number;\n  z: number;\n};\n\nexport type Vector2 = {\n  x: number;\n  y: number;\n};\n\nexport type TextureCoordinate = {\n  u: number;\n  v: number;\n};\n\nexport type Matrix = number[];\n\nexport type FaceGeometry = {\n  vertexCount: number;\n  textureCoordinateCount: number;\n  triangleCount: number;\n  vertices: Vector3[];\n  textureCoordinates: TextureCoordinate[];\n  triangleIndices: number[];\n};\n\nexport type Anchor = {\n  type: AnchorType;\n  transform: Matrix;\n  id: string;\n  center?: Vector3;\n  extent?: { width: number; length: number };\n  image?: {\n    name: string | null;\n    size: Size;\n  };\n  geometry?: FaceGeometry;\n  blendShapes?: { [shape in BlendShape]?: number };\n};\n\nexport type HitTest = {\n  type: number;\n  distance: number;\n  localTransform: number[];\n  worldTransform: number[];\n  anchor: Anchor;\n};\n\nexport type HitTestResults = {\n  hitTest: HitTest;\n};\n\nexport type DetectionImage = {\n  uri: string;\n  width: number;\n  name?: string;\n};\n\nexport type ARFrameAnchorRequest = {\n  ARFaceTrackingConfiguration?: {\n    geometry?: boolean;\n    blendShapes?: boolean | BlendShape[];\n  };\n};\n\nexport type ARFrameRequest = {\n  anchors?: ARFrameAnchorRequest;\n  rawFeaturePoints?: boolean;\n  lightEstimation?: boolean;\n  capturedDepthData?: boolean;\n};\n\nexport type LightEstimation = {\n  ambientIntensity: number;\n  ambientColorTemperature: number;\n  primaryLightDirection?: Vector3;\n  primaryLightIntensity?: number;\n};\n\nexport type RawFeaturePoint = { x: number; y: number; z: number; id: string };\n\nexport type CameraCalibrationData = {\n  intrinsicMatrix: Matrix;\n  intrinsicMatrixReferenceDimensions: Size;\n  extrinsicMatrix: Matrix;\n  pixelSize: number;\n  lensDistortionLookupTable: any;\n  inverseLensDistortionLookupTable: any;\n  lensDistortionCenter: Vector3;\n};\n\nexport type CapturedDepthData = {\n  timestamp: number;\n  depthDataQuality: DepthDataQuality;\n  depthDataAccuracy: DepthDataAccuracy;\n  depthDataFiltered: boolean;\n  cameraCalibrationData: CameraCalibrationData;\n};\n\nexport type ARFrame = {\n  timestamp: number;\n  anchors?: Anchor[] | null;\n  rawFeaturePoints?: RawFeaturePoint[] | null;\n  lightEstimation?: LightEstimation | null;\n  capturedDepthData?: CapturedDepthData | null;\n};\n\nexport type ARMatrices = {\n  transform: Matrix;\n  viewMatrix: Matrix;\n  projectionMatrix: Matrix;\n};\n\ntype ARStartResult = {\n  capturedImageTexture: number;\n};\n\ntype ReactNativeNodeHandle = number;\n\nexport type ImageResolution = {\n  width: number;\n  height: number;\n};\n\nexport type VideoFormat = {\n  type: string;\n  imageResolution: ImageResolution;\n  framesPerSecond: number;\n};\n\nexport enum BlendShape {\n  BrowDownL = 'browDown_L',\n  BrowDownR = 'browDown_R',\n  BrowInnerUp = 'browInnerUp',\n  BrowOuterUpL = 'browOuterUp_L',\n  BrowOuterUpR = 'browOuterUp_R',\n  CheekPuff = 'cheekPuff',\n  CheekSquintL = 'cheekSquint_L',\n  CheekSquintR = 'cheekSquint_R',\n  EyeBlinkL = 'eyeBlink_L',\n  EyeBlinkR = 'eyeBlink_R',\n  EyeLookDownL = 'eyeLookDown_L',\n  EyeLookDownR = 'eyeLookDown_R',\n  EyeLookInL = 'eyeLookIn_L',\n  EyeLookInR = 'eyeLookIn_R',\n  EyeLookOutL = 'eyeLookOut_L',\n  EyeLookOutR = 'eyeLookOut_R',\n  EyeLookUpL = 'eyeLookUp_L',\n  EyeLookUpR = 'eyeLookUp_R',\n  EyeSquintL = 'eyeSquint_L',\n  EyeSquintR = 'eyeSquint_R',\n  EyeWideL = 'eyeWide_L',\n  EyeWideR = 'eyeWide_R',\n  JawForward = 'jawForward',\n  JawLeft = 'jawLeft',\n  JawOpen = 'jawOpen',\n  JawRight = 'jawRight',\n  MouthClose = 'mouthClose',\n  MouthDimpleL = 'mouthDimple_L',\n  MouthDimpleR = 'mouthDimple_R',\n  MouthFrownL = 'mouthFrown_L',\n  MouthFrownR = 'mouthFrown_R',\n  MouthFunnel = 'mouthFunnel',\n  MouthLeft = 'mouthLeft',\n  MouthLowerDownL = 'mouthLowerDown_L',\n  MouthLowerDownR = 'mouthLowerDown_R',\n  MouthPressL = 'mouthPress_L',\n  MouthPressR = 'mouthPress_R',\n  MouthPucker = 'mouthPucker',\n  MouthRight = 'mouthRight',\n  MouthRollLower = 'mouthRollLower',\n  MouthRollUpper = 'mouthRollUpper',\n  MouthShrugLower = 'mouthShrugLower',\n  MouthShrugUpper = 'mouthShrugUpper',\n  MouthSmileL = 'mouthSmile_L',\n  MouthSmileR = 'mouthSmile_R',\n  MouthStretchL = 'mouthStretch_L',\n  MouthStretchR = 'mouthStretch_R',\n  MouthUpperUpL = 'mouthUpperUp_L',\n  MouthUpperUpR = 'mouthUpperUp_R',\n  NoseSneerL = 'noseSneer_L',\n  NoseSneerR = 'noseSneer_R',\n}\n\nexport enum FaceAnchorProp {\n  Geometry = 'geometry',\n  BlendShapes = 'blendShapes',\n}\n\n/**\n * Plane Detection\n * Options for whether and how ARKit detects flat surfaces in captured images.\n * https://developer.apple.com/documentation/arkit/arplanedetection\n */\nexport enum PlaneDetection {\n  /**\n   * No plane detection is run\n   */\n  None = 'none',\n  /**\n   * Plane detection determines horizontal planes in the scene\n   */\n  Horizontal = 'horizontal',\n  /**\n   * Plane detection determines horizontal planes in the scene\n   */\n  Vertical = 'vertical',\n}\n\n/**\n * Hit-Test Result Types\n * Possible types for specifying a hit-test search, or for the result of a hit-test search.\n * https://developer.apple.com/documentation/arkit/arhittestresulttype\n */\nexport enum HitTestResultTypes {\n  /**\n   * Result type from intersecting the nearest feature point.\n   */\n  FeaturePoint = 'featurePoint',\n  /**\n   * Result type from intersecting a horizontal plane estimate, determined for the current frame.\n   */\n  HorizontalPlane = 'horizontalPlane',\n  /**\n   * Result type from intersecting a vertical plane estimate, determined for the current frame.\n   */\n  VerticalPlane = 'verticalPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor.\n   */\n  ExistingPlane = 'existingPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * extent.\n   */\n  ExistingPlaneUsingExtent = 'existingPlaneUsingExtent',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * geometry.\n   */\n  ExistingPlaneUsingGeometry = 'existingPlaneUsingGeometry',\n}\n\n/**\n * World Alignment\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arworldalignment\n */\nexport enum WorldAlignment {\n  /**\n   * Aligns the world with gravity that is defined by vector (0, -1, 0).\n   */\n  Gravity = 'gravity',\n  /**\n   * Aligns the world with gravity that is defined by the vector (0, -1, 0) and heading (w.r.t. true\n   * north) that is given by the vector (0, 0, -1).\n   */\n  GravityAndHeading = 'gravityAndHeading',\n  /**\n   * Aligns the world with the camera’s orientation.\n   */\n  AlignmentCamera = 'alignmentCamera',\n}\n\nexport enum EventType {\n  FrameDidUpdate = ExponentAR.frameDidUpdate,\n  DidFailWithError = ExponentAR.didFailWithError,\n  AnchorsDidUpdate = ExponentAR.anchorsDidUpdate,\n  CameraDidChangeTrackingState = ExponentAR.cameraDidChangeTrackingState,\n  SessionWasInterrupted = ExponentAR.sessionWasInterrupted,\n  SessionInterruptionEnded = ExponentAR.sessionInterruptionEnded,\n}\n\nexport enum AnchorType {\n  Face = 'ARFaceAnchor',\n  Image = 'ARImageAnchor',\n  Plane = 'ARPlaneAnchor',\n  Anchor = 'ARAnchor',\n}\n\nexport enum AnchorEventType {\n  Add = 'add',\n  Update = 'update',\n  Remove = 'remove',\n}\n\nexport enum FrameAttribute {\n  Anchors = 'anchors',\n  RawFeaturePoints = 'rawFeaturePoints',\n  LightEstimation = 'lightEstimation',\n  CapturedDepthData = 'capturedDepthData',\n}\n\nexport enum TrackingState {\n  /** Tracking is not available. */\n  NotAvailable = 'ARTrackingStateNotAvailable',\n  /** Tracking is limited. See tracking reason for details. */\n  Limited = 'ARTrackingStateLimited',\n  /** Tracking is Normal. */\n  Normal = 'ARTrackingStateNormal',\n}\n\nexport enum TrackingStateReason {\n  /** Tracking is not limited. */\n  None = 'ARTrackingStateReasonNone',\n\n  /** Tracking is limited due to initialization in progress. */\n  Initializing = 'ARTrackingStateReasonInitializing',\n\n  /** Tracking is limited due to a excessive motion of the camera. */\n  ExcessiveMotion = 'ARTrackingStateReasonExcessiveMotion',\n\n  /** Tracking is limited due to a lack of features visible to the camera. */\n  InsufficientFeatures = 'ARTrackingStateReasonInsufficientFeatures',\n\n  /** Tracking is limited due to a relocalization in progress. */\n  Relocalizing = 'ARTrackingStateReasonRelocalizing',\n}\n\ntype FrameDidUpdateEvent = {};\n\ntype DidFailWithErrorEvent = { error: Error };\n\ntype AnchorsDidUpdateEvent = {\n  eventType: AnchorEventType;\n  anchors: Anchor[];\n};\n\ntype CameraDidChangeTrackingStateEvent = {\n  trackingState: TrackingState;\n  trackingStateReason: TrackingStateReason;\n};\n\ntype SessionWasInterruptedEvent = {};\n\ntype SessionInterruptionEndedEvent = {};\n\nexport function getVersion(): string {\n  return ExponentAR.ARKitVersion;\n}\n\nconst AvailabilityErrorMessages = {\n  Simulator: `Cannot run EXGL in a simulator`,\n  ANineChip: `ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a`,\n  ARKitOnlyOnIOS: `ARKit can only run on an iOS device! This is a`,\n};\n\nexport function isAvailable(): boolean {\n  if (\n    !Constants.isDevice || // Prevent Simulators\n    // @ts-ignore\n    Platform.isTVOS ||\n    Platform.OS !== 'ios' || // Device is iOS\n    Constants.deviceYearClass < 2015 || // Device has A9 chip\n    !ExponentAR.isSupported || // ARKit is included in the build\n    !ExponentAR.startAsync // Older SDK versions (27 and lower) that are fully compatible\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function getUnavailabilityReason(): string {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return `${AvailabilityErrorMessages.ARKitOnlyOnIOS} ${Platform.OS} device`;\n  } else if (Constants.deviceYearClass < 2015) {\n    return `${AvailabilityErrorMessages.ANineChip} ${Constants.deviceYearClass} device`;\n  }\n  return 'Unknown Reason';\n}\n\nexport function onFrameDidUpdate(\n  listener: (event: FrameDidUpdateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.FrameDidUpdate, listener);\n}\n\nexport function onDidFailWithError(\n  listener: (event: DidFailWithErrorEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.DidFailWithError, listener);\n}\n\nexport function onAnchorsDidUpdate(\n  listener: (event: AnchorsDidUpdateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.AnchorsDidUpdate, listener);\n}\n\nexport function onCameraDidChangeTrackingState(\n  listener: (event: CameraDidChangeTrackingStateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.CameraDidChangeTrackingState, listener);\n}\n\nexport function onSessionWasInterrupted(\n  listener: (event: SessionWasInterruptedEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionWasInterrupted, listener);\n}\n\nexport function onSessionInterruptionEnded(\n  listener: (event: SessionInterruptionEndedEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionInterruptionEnded, listener);\n}\n\nfunction _addListener(eventType: EventType, event: (...args: any[]) => void): EmitterSubscription {\n  return emitter.addListener(eventType as any, event);\n}\n\nexport function removeAllListeners(eventType?: EventType): void {\n  emitter.removeAllListeners(eventType as any);\n}\n\n// TODO: support multiple types (take an array or bit flags)\nexport function performHitTest(point: Vector2, types: HitTestResultTypes): HitTestResults {\n  if (ExponentAR.performHitTest) {\n    return ExponentAR.performHitTest(point, types);\n  }\n  throw new Error(`AR hit testing is not supported on this device`);\n}\n\nexport async function setDetectionImagesAsync(images: {\n  [name: string]: DetectionImage;\n}): Promise<void> {\n  if (ExponentAR.setDetectionImagesAsync) {\n    await ExponentAR.setDetectionImagesAsync(images);\n  }\n}\n\nexport function getCurrentFrame(attributes?: ARFrameRequest): ARFrame {\n  if (ExponentAR.getCurrentFrame) {\n    return ExponentAR.getCurrentFrame(attributes);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nexport function getARMatrices(near: number, far: number): ARMatrices {\n  if (ExponentAR.getARMatrices) {\n    return ExponentAR.getARMatrices(near, far);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nexport async function stopAsync(): Promise<void> {\n  if (ExponentAR.stopAsync) {\n    await ExponentAR.stopAsync();\n  }\n}\n\nexport async function startAsync(\n  node: ReactNativeNodeHandle | React.Component,\n  configuration: TrackingConfiguration\n): Promise<ARStartResult> {\n  let handle = typeof node === 'number' ? node : _getNodeHandle(node);\n  if (ExponentAR.startAsync) {\n    return await ExponentAR.startAsync(handle, configuration);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nfunction _getNodeHandle(component: React.Component): ReactNativeNodeHandle {\n  let handle = findNodeHandle(component);\n  if (handle === null) {\n    throw new Error(`Could not find the React node handle for the AR component: ${component}`);\n  }\n  return handle;\n}\n\nexport function reset() {\n  if (ExponentAR.reset) {\n    ExponentAR.reset();\n  }\n}\n\nexport function resume() {\n  if (ExponentAR.resume) {\n    ExponentAR.resume();\n  }\n}\n\nexport function pause() {\n  if (ExponentAR.pause) {\n    ExponentAR.pause();\n  }\n}\n\nexport async function setConfigurationAsync(configuration: TrackingConfiguration): Promise<void> {\n  if (ExponentAR.setConfigurationAsync) {\n    await ExponentAR.setConfigurationAsync(configuration);\n  }\n}\n\nexport function getProvidesAudioData(): boolean {\n  if (ExponentAR.getProvidesAudioData) {\n    return ExponentAR.getProvidesAudioData();\n  }\n  return false;\n}\n\nexport function setProvidesAudioData(providesAudioData: boolean): void {\n  if (ExponentAR.setProvidesAudioData) {\n    ExponentAR.setProvidesAudioData(providesAudioData);\n  }\n}\n\nexport function setPlaneDetection(planeDetection: PlaneDetection): void {\n  if (ExponentAR.setPlaneDetection) {\n    ExponentAR.setPlaneDetection(planeDetection);\n  }\n}\n\nexport function getPlaneDetection(): PlaneDetection {\n  if (ExponentAR.getPlaneDetection) {\n    return ExponentAR.getPlaneDetection();\n  }\n  throw new Error(`AR plane detection is not supported on this device`);\n}\n\nexport function getCameraTexture(): number {\n  if (ExponentAR.getCameraTexture) {\n    return ExponentAR.getCameraTexture();\n  }\n  throw new Error(`AR camera textures are not supported on this device`);\n}\n\nexport async function setWorldOriginAsync(matrix_float4x4: Matrix): Promise<void> {\n  if (ExponentAR.setWorldOriginAsync) {\n    await ExponentAR.setWorldOriginAsync(matrix_float4x4);\n  }\n}\n\nexport function setLightEstimationEnabled(isLightEstimationEnabled: boolean) {\n  if (ExponentAR.setLightEstimationEnabled) {\n    ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);\n  }\n}\n\nexport function getLightEstimationEnabled(): boolean {\n  if (ExponentAR.getLightEstimationEnabled) {\n    return ExponentAR.getLightEstimationEnabled();\n  }\n  return false;\n}\n\nexport function setAutoFocusEnabled(isAutoFocusEnabled: boolean): void {\n  if (ExponentAR.setAutoFocusEnabled) {\n    ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);\n  }\n}\n\nexport function getAutoFocusEnabled(): boolean {\n  if (ExponentAR.getAutoFocusEnabled) {\n    return ExponentAR.getAutoFocusEnabled();\n  }\n  return false;\n}\n\nexport function setWorldAlignment(worldAlignment: WorldAlignment): void {\n  if (ExponentAR.setWorldAlignment) {\n    ExponentAR.setWorldAlignment(worldAlignment);\n  }\n}\n\nexport function getWorldAlignment(): WorldAlignment {\n  if (ExponentAR.getWorldAlignment) {\n    return ExponentAR.getWorldAlignment();\n  }\n  throw new Error(`AR world alignment is not supported on this device`);\n}\n\nexport function isConfigurationAvailable(configuration: TrackingConfiguration): boolean {\n  const { width, height } = Dimensions.get('window');\n  // @ts-ignore: re-evaluate this for the new iPhones (2018)\n  const isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {\n    return true;\n  }\n  return !!ExponentAR[configuration];\n}\n\nexport function getSupportedVideoFormats(configuration: TrackingConfiguration): VideoFormat[] {\n  const videoFormats = {\n    [TrackingConfiguration.World]: 'WorldTrackingVideoFormats',\n    [TrackingConfiguration.Orientation]: 'OrientationTrackingVideoFormats',\n    [TrackingConfiguration.Face]: 'FaceTrackingVideoFormats',\n  };\n  const videoFormat = videoFormats[configuration];\n  return ExponentAR[videoFormat] || [];\n}\n\nexport function isFrontCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\n\nexport function isRearCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}