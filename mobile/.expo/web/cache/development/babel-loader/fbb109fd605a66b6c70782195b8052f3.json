{"ast":null,"code":"import { Linking, NativeModules, Platform } from 'react-native';\nconst {\n  ExponentWebBrowser\n} = NativeModules;\n\nasync function openBrowserAsync(url) {\n  return ExponentWebBrowser.openBrowserAsync(url);\n}\n\nfunction dismissBrowser() {\n  ExponentWebBrowser.dismissBrowser();\n}\n\nasync function openAuthSessionAsync(url, redirectUrl) {\n  if (_authSessionIsNativelySupported()) {\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\n\nfunction dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\n\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler = null;\n\nasync function _openAuthSessionPolyfillAsync(startUrl, returnUrl) {\n  if (_redirectHandler) {\n    throw new Error(`The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`);\n  }\n\n  try {\n    return await Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n  } finally {\n    dismissBrowser();\n\n    if (!_redirectHandler) {\n      throw new Error(`The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`);\n    }\n\n    Linking.removeEventListener('url', _redirectHandler);\n    _redirectHandler = null;\n  }\n}\n\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(resolve => {\n    _redirectHandler = event => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n\nexport default {\n  openBrowserAsync,\n  openAuthSessionAsync,\n  dismissBrowser,\n  dismissAuthSession\n};","map":{"version":3,"sources":["../src/WebBrowser.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,aAAlB,EAAiC,QAAjC,QAAiD,cAAjD;AAEA,MAAM;AAAE,EAAA;AAAF,IAAyB,aAA/B;;AAiBA,eAAe,gBAAf,CAAgC,GAAhC,EAA2C;AACzC,SAAO,kBAAkB,CAAC,gBAAnB,CAAoC,GAApC,CAAP;AACD;;AAED,SAAS,cAAT,GAAuB;AACrB,EAAA,kBAAkB,CAAC,cAAnB;AACD;;AAED,eAAe,oBAAf,CAAoC,GAApC,EAAiD,WAAjD,EAAoE;AAClE,MAAI,+BAA+B,EAAnC,EAAuC;AACrC,WAAO,kBAAkB,CAAC,oBAAnB,CAAwC,GAAxC,EAA6C,WAA7C,CAAP;AACD,GAFD,MAEO;AACL,WAAO,6BAA6B,CAAC,GAAD,EAAM,WAAN,CAApC;AACD;AACF;;AAED,SAAS,kBAAT,GAA2B;AACzB,MAAI,+BAA+B,EAAnC,EAAuC;AACrC,IAAA,kBAAkB,CAAC,kBAAnB;AACD,GAFD,MAEO;AACL,IAAA,kBAAkB,CAAC,cAAnB;AACD;AACF;AAED;;;AAEA,SAAS,+BAAT,GAAwC;AACtC,MAAI,QAAQ,CAAC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,KAAP;AACD;;AAED,QAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAV,CAAP,EAA2B,EAA3B,CAA9B;AACA,SAAO,aAAa,IAAI,EAAxB;AACD;;AAED,IAAI,gBAAgB,GAA4C,IAAhE;;AAEA,eAAe,6BAAf,CACE,QADF,EAEE,SAFF,EAEmB;AAEjB,MAAI,gBAAJ,EAAsB;AACpB,UAAM,IAAI,KAAJ,CACJ,wGADI,CAAN;AAGD;;AAED,MAAI;AACF,WAAO,MAAM,OAAO,CAAC,IAAR,CAAa,CAAC,gBAAgB,CAAC,QAAD,CAAjB,EAA6B,qBAAqB,CAAC,SAAD,CAAlD,CAAb,CAAb;AACD,GAFD,SAEU;AACR,IAAA,cAAc;;AACd,QAAI,CAAC,gBAAL,EAAuB;AACrB,YAAM,IAAI,KAAJ,CACJ,oGADI,CAAN;AAGD;;AACD,IAAA,OAAO,CAAC,mBAAR,CAA4B,KAA5B,EAAmC,gBAAnC;AACA,IAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AAED,SAAS,qBAAT,CAA+B,SAA/B,EAAgD;AAC9C,SAAO,IAAI,OAAJ,CAAY,OAAO,IAAG;AAC3B,IAAA,gBAAgB,GAAI,KAAD,IAAyB;AAC1C,UAAI,KAAK,CAAC,GAAN,CAAU,UAAV,CAAqB,SAArB,CAAJ,EAAqC;AACnC,QAAA,OAAO,CAAC;AAAE,UAAA,GAAG,EAAE,KAAK,CAAC,GAAb;AAAkB,UAAA,IAAI,EAAE;AAAxB,SAAD,CAAP;AACD;AACF,KAJD;;AAMA,IAAA,OAAO,CAAC,gBAAR,CAAyB,KAAzB,EAAgC,gBAAhC;AACD,GARM,CAAP;AASD;;AAED,eAAe;AACb,EAAA,gBADa;AAEb,EAAA,oBAFa;AAGb,EAAA,cAHa;AAIb,EAAA;AAJa,CAAf","sourcesContent":["import { Linking, NativeModules, Platform } from 'react-native';\n\nconst { ExponentWebBrowser } = NativeModules;\n\ntype RedirectEvent = {\n  url: string;\n};\n\ntype AuthSessionResult = RedirectResult | BrowserResult;\n\ntype BrowserResult = {\n  type: 'cancel' | 'dismiss';\n};\n\ntype RedirectResult = {\n  type: 'success';\n  url: string;\n};\n\nasync function openBrowserAsync(url: string): Promise<BrowserResult> {\n  return ExponentWebBrowser.openBrowserAsync(url);\n}\n\nfunction dismissBrowser(): void {\n  ExponentWebBrowser.dismissBrowser();\n}\n\nasync function openAuthSessionAsync(url: string, redirectUrl: string): Promise<AuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\n\nfunction dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string\n): Promise<AuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  try {\n    return await Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n  } finally {\n    dismissBrowser();\n    if (!_redirectHandler) {\n      throw new Error(\n        `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n      );\n    }\n    Linking.removeEventListener('url', _redirectHandler);\n    _redirectHandler = null;\n  }\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<RedirectResult> {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n\nexport default {\n  openBrowserAsync,\n  openAuthSessionAsync,\n  dismissBrowser,\n  dismissAuthSession,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}