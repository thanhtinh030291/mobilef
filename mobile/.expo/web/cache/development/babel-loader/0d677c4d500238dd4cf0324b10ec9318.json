{"ast":null,"code":"import { EventEmitter } from 'fbemitter';\nimport { DeviceEventEmitter, NativeModules } from 'react-native';\nconst {\n  ExponentUpdates\n} = NativeModules;\nexport function reload() {\n  ExponentUpdates.reload();\n}\nexport function reloadFromCache() {\n  ExponentUpdates.reloadFromCache();\n}\nexport async function checkForUpdateAsync() {\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  let returnObj = {\n    isAvailable: !!result\n  };\n\n  if (result) {\n    returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;\n  }\n\n  return returnObj;\n}\nexport async function fetchUpdateAsync({\n  eventListener\n} = {}) {\n  let subscription;\n  let result;\n\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n\n  let returnObj = {\n    isNew: !!result\n  };\n\n  if (result) {\n    returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;\n  }\n\n  return returnObj;\n}\n\nlet _emitter;\n\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n\n  return _emitter;\n}\n\nfunction _emitEvent(params) {\n  let newParams = params;\n\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener) {\n  let emitter = _getEmitter();\n\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":{"version":3,"sources":["../src/Updates.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAAgD,WAAhD;AACA,SAAS,kBAAT,EAA6B,aAA7B,QAAkD,cAAlD;AAEA,MAAM;AAAE,EAAA;AAAF,IAAsB,aAA5B;AAEA,OAAM,SAAU,MAAV,GAAgB;AACpB,EAAA,eAAe,CAAC,MAAhB;AACD;AAED,OAAM,SAAU,eAAV,GAAyB;AAC7B,EAAA,eAAe,CAAC,eAAhB;AACD;AAED,OAAO,eAAe,mBAAf,GAAkC;AACvC,QAAM,MAAM,GAAG,MAAM,eAAe,CAAC,mBAAhB,EAArB;AACA,MAAI,SAAS,GAAQ;AACnB,IAAA,WAAW,EAAE,CAAC,CAAC;AADI,GAArB;;AAGA,MAAI,MAAJ,EAAY;AACV,IAAA,SAAS,CAAC,QAAV,GAAqB,OAAO,MAAP,KAAkB,QAAlB,GAA6B,IAAI,CAAC,KAAL,CAAW,MAAX,CAA7B,GAAkD,MAAvE;AACD;;AACD,SAAO,SAAP;AACD;AAED,OAAO,eAAe,gBAAf,CAAgC;AAAE,EAAA;AAAF,IAAyB,EAAzD,EAA2D;AAChE,MAAI,YAAJ;AACA,MAAI,MAAJ;;AACA,MAAI,aAAa,IAAI,OAAO,aAAP,KAAyB,UAA9C,EAA0D;AACxD,IAAA,YAAY,GAAG,WAAW,CAAC,aAAD,CAA1B;AACD;;AACD,MAAI;AACF,IAAA,MAAM,GAAG,MAAM,eAAe,CAAC,gBAAhB,EAAf;AACD,GAFD,SAEU;AACR,IAAA,YAAY,IAAI,YAAY,CAAC,MAAb,EAAhB;AACD;;AACD,MAAI,SAAS,GAAQ;AACnB,IAAA,KAAK,EAAE,CAAC,CAAC;AADU,GAArB;;AAGA,MAAI,MAAJ,EAAY;AACV,IAAA,SAAS,CAAC,QAAV,GAAqB,OAAO,MAAP,KAAkB,QAAlB,GAA6B,IAAI,CAAC,KAAL,CAAW,MAAX,CAA7B,GAAkD,MAAvE;AACD;;AACD,SAAO,SAAP;AACD;;AAED,IAAI,QAAJ;;AAEA,SAAS,WAAT,GAAoB;AAClB,MAAI,CAAC,QAAL,EAAe;AACb,IAAA,QAAQ,GAAG,IAAI,YAAJ,EAAX;AACA,IAAA,kBAAkB,CAAC,WAAnB,CAA+B,6BAA/B,EAA8D,UAA9D;AACD;;AACD,SAAO,QAAP;AACD;;AAED,SAAS,UAAT,CAAoB,MAApB,EAA0B;AACxB,MAAI,SAAS,GAAG,MAAhB;;AACA,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,IAAA,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,MAAX,CAAZ;AACD;;AACD,MAAI,SAAS,CAAC,cAAd,EAA8B;AAC5B,IAAA,SAAS,CAAC,QAAV,GAAqB,IAAI,CAAC,KAAL,CAAW,SAAS,CAAC,cAArB,CAArB;AACA,WAAO,SAAS,CAAC,cAAjB;AACD;;AAED,MAAI,CAAC,QAAL,EAAe;AACb,UAAM,IAAI,KAAJ,CAAU,2DAAV,CAAN;AACD;;AACD,EAAA,QAAQ,CAAC,IAAT,CAAc,uBAAd,EAAuC,SAAvC;AACD;;AAED,OAAM,SAAU,WAAV,CAAsB,QAAtB,EAAwC;AAC5C,MAAI,OAAO,GAAG,WAAW,EAAzB;;AACA,SAAO,OAAO,CAAC,WAAR,CAAoB,uBAApB,EAA6C,QAA7C,CAAP;AACD;AAED,OAAO,MAAM,SAAS,GAAG;AACvB,EAAA,gBAAgB,EAAE,eADK;AAEvB,EAAA,iBAAiB,EAAE,kBAFI;AAGvB,EAAA,iBAAiB,EAAE,kBAHI;AAIvB,EAAA,mBAAmB,EAAE,mBAJE;AAKvB,EAAA,KAAK,EAAE;AALgB,CAAlB","sourcesContent":["import { EventEmitter, EventSubscription } from 'fbemitter';\nimport { DeviceEventEmitter, NativeModules } from 'react-native';\n\nconst { ExponentUpdates } = NativeModules;\n\nexport function reload(): void {\n  ExponentUpdates.reload();\n}\n\nexport function reloadFromCache(): void {\n  ExponentUpdates.reloadFromCache();\n}\n\nexport async function checkForUpdateAsync(): Promise<Object> {\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  let returnObj: any = {\n    isAvailable: !!result,\n  };\n  if (result) {\n    returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;\n  }\n  return returnObj;\n}\n\nexport async function fetchUpdateAsync({ eventListener }: any = {}): Promise<Object> {\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n  let returnObj: any = {\n    isNew: !!result,\n  };\n  if (result) {\n    returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;\n  }\n  return returnObj;\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Function): EventSubscription {\n  let emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}