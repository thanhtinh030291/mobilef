{"ast":null,"code":"import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\nconst {\n  ExponentSpeech\n} = NativeModules;\nconst SpeechEventEmitter = new NativeEventEmitter(ExponentSpeech);\nconst _CALLBACKS = {};\nlet _nextCallbackId = 1;\nlet _didSetListeners = false;\n\nfunction _unregisterListenersIfNeeded() {\n  if (Object.keys(_CALLBACKS).length === 0) {\n    removeSpeakingListener('Exponent.speakingStarted');\n    removeSpeakingListener('Exponent.speakingDone');\n    removeSpeakingListener('Exponent.speakingStopped');\n    removeSpeakingListener('Exponent.speakingError');\n    _didSetListeners = false;\n  }\n}\n\nfunction _registerListenersIfNeeded() {\n  if (_didSetListeners) return;\n  _didSetListeners = true;\n  setSpeakingListener('Exponent.speakingStarted', ({\n    id\n  }) => {\n    const options = _CALLBACKS[id];\n\n    if (options && options.onStart) {\n      options.onStart();\n    }\n  });\n  setSpeakingListener('Exponent.speakingDone', ({\n    id\n  }) => {\n    const options = _CALLBACKS[id];\n\n    if (options && options.onDone) {\n      options.onDone();\n    }\n\n    delete _CALLBACKS[id];\n\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingStopped', ({\n    id\n  }) => {\n    const options = _CALLBACKS[id];\n\n    if (options && options.onStopped) {\n      options.onStopped();\n    }\n\n    delete _CALLBACKS[id];\n\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingError', ({\n    id,\n    error\n  }) => {\n    const options = _CALLBACKS[id];\n\n    if (options && options.onError) {\n      options.onError(new Error(error));\n    }\n\n    delete _CALLBACKS[id];\n\n    _unregisterListenersIfNeeded();\n  });\n}\n\nexport function speak(text, options = {}) {\n  const id = _nextCallbackId++;\n  _CALLBACKS[id] = options;\n\n  _registerListenersIfNeeded();\n\n  ExponentSpeech.speak(String(id), text, options);\n}\nexport async function isSpeakingAsync() {\n  return await ExponentSpeech.isSpeaking();\n}\nexport function stop() {\n  ExponentSpeech.stop();\n}\nexport function pause() {\n  if (Platform.OS === 'ios') {\n    ExponentSpeech.pause();\n  } else {\n    throw new Error('Speech.pause is not available on Android');\n  }\n}\nexport function resume() {\n  if (Platform.OS === 'ios') {\n    ExponentSpeech.resume();\n  } else {\n    throw new Error('Speech.resume is not available on Android');\n  }\n}\n\nfunction setSpeakingListener(eventName, callback) {\n  if (SpeechEventEmitter.listeners(eventName).length > 0) {\n    SpeechEventEmitter.removeAllListeners(eventName);\n  }\n\n  SpeechEventEmitter.addListener(eventName, callback);\n}\n\nfunction removeSpeakingListener(eventName) {\n  SpeechEventEmitter.removeAllListeners(eventName);\n}","map":{"version":3,"sources":["../src/Speech.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\n\nconst { ExponentSpeech } = NativeModules;\nconst SpeechEventEmitter = new NativeEventEmitter(ExponentSpeech);\n\ntype Options = {\n  language?: string;\n  pitch?: number;\n  rate?: number;\n  onStart?: () => void;\n  onStopped?: () => void;\n  onDone?: () => void;\n  onError?: (error: Error) => void;\n};\n\nconst _CALLBACKS = {};\nlet _nextCallbackId = 1;\nlet _didSetListeners = false;\n\nfunction _unregisterListenersIfNeeded() {\n  if (Object.keys(_CALLBACKS).length === 0) {\n    removeSpeakingListener('Exponent.speakingStarted');\n    removeSpeakingListener('Exponent.speakingDone');\n    removeSpeakingListener('Exponent.speakingStopped');\n    removeSpeakingListener('Exponent.speakingError');\n    _didSetListeners = false;\n  }\n}\n\nfunction _registerListenersIfNeeded() {\n  if (_didSetListeners) return;\n  _didSetListeners = true;\n  setSpeakingListener('Exponent.speakingStarted', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStart) {\n      options.onStart();\n    }\n  });\n  setSpeakingListener('Exponent.speakingDone', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onDone) {\n      options.onDone();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingStopped', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStopped) {\n      options.onStopped();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingError', ({ id, error }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onError) {\n      options.onError(new Error(error));\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n}\n\nexport function speak(text: string, options: Options = {}) {\n  const id = _nextCallbackId++;\n  _CALLBACKS[id] = options;\n  _registerListenersIfNeeded();\n  ExponentSpeech.speak(String(id), text, options);\n}\n\nexport async function isSpeakingAsync(): Promise<boolean> {\n  return await ExponentSpeech.isSpeaking();\n}\n\nexport function stop() {\n  ExponentSpeech.stop();\n}\n\nexport function pause() {\n  if (Platform.OS === 'ios') {\n    ExponentSpeech.pause();\n  } else {\n    throw new Error('Speech.pause is not available on Android');\n  }\n}\n\nexport function resume() {\n  if (Platform.OS === 'ios') {\n    ExponentSpeech.resume();\n  } else {\n    throw new Error('Speech.resume is not available on Android');\n  }\n}\n\nfunction setSpeakingListener(eventName, callback) {\n  if (SpeechEventEmitter.listeners(eventName).length > 0) {\n    SpeechEventEmitter.removeAllListeners(eventName);\n  }\n  SpeechEventEmitter.addListener(eventName, callback);\n}\n\nfunction removeSpeakingListener(eventName) {\n  SpeechEventEmitter.removeAllListeners(eventName);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}