{"ast":null,"code":"'use strict';\n\nvar Queue = require('tiny-queue');\n\nvar immediate = require('immediate');\n\nvar noop = require('noop-fn');\n\nvar WebSQLTransaction = require('./WebSQLTransaction');\n\nvar ROLLBACK = [{\n  sql: 'ROLLBACK;',\n  args: []\n}];\nvar COMMIT = [{\n  sql: 'END;',\n  args: []\n}]; // v8 likes predictable objects\n\nfunction TransactionTask(readOnly, txnCallback, errorCallback, successCallback) {\n  this.readOnly = readOnly;\n  this.txnCallback = txnCallback;\n  this.errorCallback = errorCallback;\n  this.successCallback = successCallback;\n}\n\nfunction WebSQLDatabase(dbVersion, db) {\n  this.version = dbVersion;\n  this._db = db;\n  this._txnQueue = new Queue();\n  this._running = false;\n  this._currentTask = null;\n}\n\nWebSQLDatabase.prototype._onTransactionComplete = function (err) {\n  var self = this;\n\n  function done() {\n    if (err) {\n      self._currentTask.errorCallback(err);\n    } else {\n      self._currentTask.successCallback();\n    }\n\n    self._running = false;\n    self._currentTask = null;\n\n    self._runNextTransaction();\n  }\n\n  if (self._currentTask.readOnly) {\n    done(); // read-only doesn't require a transaction\n  } else if (err) {\n    self._db.exec(ROLLBACK, false, done);\n  } else {\n    self._db.exec(COMMIT, false, done);\n  }\n};\n\nWebSQLDatabase.prototype._runTransaction = function () {\n  var self = this;\n  var txn = new WebSQLTransaction(self);\n  immediate(function () {\n    self._currentTask.txnCallback(txn);\n\n    txn._checkDone();\n  });\n};\n\nWebSQLDatabase.prototype._runNextTransaction = function () {\n  if (this._running) {\n    return;\n  }\n\n  var task = this._txnQueue.shift();\n\n  if (!task) {\n    return;\n  }\n\n  this._currentTask = task;\n  this._running = true;\n\n  this._runTransaction();\n};\n\nWebSQLDatabase.prototype._createTransaction = function (readOnly, txnCallback, errorCallback, successCallback) {\n  errorCallback = errorCallback || noop;\n  successCallback = successCallback || noop;\n\n  if (typeof txnCallback !== 'function') {\n    throw new Error('The callback provided as parameter 1 is not a function.');\n  }\n\n  this._txnQueue.push(new TransactionTask(readOnly, txnCallback, errorCallback, successCallback));\n\n  this._runNextTransaction();\n};\n\nWebSQLDatabase.prototype.transaction = function (txnCallback, errorCallback, successCallback) {\n  this._createTransaction(false, txnCallback, errorCallback, successCallback);\n};\n\nWebSQLDatabase.prototype.readTransaction = function (txnCallback, errorCallback, successCallback) {\n  this._createTransaction(true, txnCallback, errorCallback, successCallback);\n};\n\nmodule.exports = WebSQLDatabase;","map":{"version":3,"sources":["C:/xampp/htdocs/app/mobile/node_modules/@expo/websql/lib/websql/WebSQLDatabase.js"],"names":["Queue","require","immediate","noop","WebSQLTransaction","ROLLBACK","sql","args","COMMIT","TransactionTask","readOnly","txnCallback","errorCallback","successCallback","WebSQLDatabase","dbVersion","db","version","_db","_txnQueue","_running","_currentTask","prototype","_onTransactionComplete","err","self","done","_runNextTransaction","exec","_runTransaction","txn","_checkDone","task","shift","_createTransaction","Error","push","transaction","readTransaction","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Queue = require('tiny-queue');\nvar immediate = require('immediate');\nvar noop = require('noop-fn');\n\nvar WebSQLTransaction = require('./WebSQLTransaction');\n\nvar ROLLBACK = [\n  {sql: 'ROLLBACK;', args: []}\n];\n\nvar COMMIT = [\n  {sql: 'END;', args: []}\n];\n\n// v8 likes predictable objects\nfunction TransactionTask(readOnly, txnCallback, errorCallback, successCallback) {\n  this.readOnly = readOnly;\n  this.txnCallback = txnCallback;\n  this.errorCallback = errorCallback;\n  this.successCallback = successCallback;\n}\n\nfunction WebSQLDatabase(dbVersion, db) {\n  this.version = dbVersion;\n  this._db = db;\n  this._txnQueue = new Queue();\n  this._running = false;\n  this._currentTask = null;\n}\n\nWebSQLDatabase.prototype._onTransactionComplete = function(err) {\n  var self = this;\n\n  function done() {\n    if (err) {\n      self._currentTask.errorCallback(err);\n    } else {\n      self._currentTask.successCallback();\n    }\n    self._running = false;\n    self._currentTask = null;\n    self._runNextTransaction();\n  }\n\n  if (self._currentTask.readOnly) {\n    done(); // read-only doesn't require a transaction\n  } else if (err) {\n    self._db.exec(ROLLBACK, false, done);\n  } else {\n    self._db.exec(COMMIT, false, done);\n  }\n};\n\nWebSQLDatabase.prototype._runTransaction = function () {\n  var self = this;\n  var txn = new WebSQLTransaction(self);\n\n  immediate(function () {\n    self._currentTask.txnCallback(txn);\n    txn._checkDone();\n  });\n};\n\nWebSQLDatabase.prototype._runNextTransaction = function() {\n  if (this._running) {\n    return;\n  }\n  var task = this._txnQueue.shift();\n\n  if (!task) {\n    return;\n  }\n\n  this._currentTask = task;\n  this._running = true;\n  this._runTransaction();\n};\n\nWebSQLDatabase.prototype._createTransaction = function(\n    readOnly, txnCallback, errorCallback, successCallback) {\n  errorCallback = errorCallback || noop;\n  successCallback = successCallback || noop;\n\n  if (typeof txnCallback !== 'function') {\n    throw new Error('The callback provided as parameter 1 is not a function.');\n  }\n\n  this._txnQueue.push(new TransactionTask(readOnly, txnCallback, errorCallback, successCallback));\n  this._runNextTransaction();\n};\n\nWebSQLDatabase.prototype.transaction = function (txnCallback, errorCallback, successCallback) {\n  this._createTransaction(false, txnCallback, errorCallback, successCallback);\n};\n\nWebSQLDatabase.prototype.readTransaction = function (txnCallback, errorCallback, successCallback) {\n  this._createTransaction(true, txnCallback, errorCallback, successCallback);\n};\n\nmodule.exports = WebSQLDatabase;"]},"metadata":{},"sourceType":"script"}