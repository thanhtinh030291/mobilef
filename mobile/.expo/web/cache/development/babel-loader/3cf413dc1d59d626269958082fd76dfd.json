{"ast":null,"code":"import { EventEmitter } from 'fbemitter';\nimport warning from 'fbjs/lib/warning';\nimport invariant from 'invariant';\nimport { AsyncStorage, DeviceEventEmitter, NativeModules, Platform } from 'react-native';\nconst {\n  ExponentNotifications\n} = NativeModules;\n\nlet _emitter;\n\nlet _initialNotification;\n\nfunction _maybeInitEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.notification', _emitNotification);\n  }\n}\n\nfunction _emitNotification(notification) {\n  if (typeof notification === 'string') {\n    notification = JSON.parse(notification);\n  }\n  /* Don't mutate the original notification */\n\n\n  notification = { ...notification\n  };\n\n  if (typeof notification.data === 'string') {\n    try {\n      notification.data = JSON.parse(notification.data);\n    } catch (e) {// It's actually just a string, that's fine\n    }\n  }\n\n  _emitter.emit('notification', notification);\n}\n\nfunction _processNotification(notification) {\n  notification = Object.assign({}, notification);\n\n  if (!notification.data) {\n    notification.data = {};\n  }\n\n  if (notification.hasOwnProperty('count')) {\n    delete notification.count;\n  } // Delete any Android properties on iOS and merge the iOS properties on root notification object\n\n\n  if (Platform.OS === 'ios') {\n    if (notification.android) {\n      delete notification.android;\n    }\n\n    if (notification.ios) {\n      notification = Object.assign(notification, notification.ios);\n      delete notification.ios;\n    }\n  } // Delete any iOS properties on Android and merge the Android properties on root notification\n  // object\n\n\n  if (Platform.OS === 'android') {\n    if (notification.ios) {\n      delete notification.ios;\n    }\n\n    if (notification.android) {\n      notification = Object.assign(notification, notification.android);\n      delete notification.android;\n    }\n  }\n\n  return notification;\n}\n\nfunction _validateNotification(notification) {\n  if (Platform.OS === 'ios') {\n    invariant(!!notification.title && !!notification.body, 'Local notifications on iOS require both a title and a body');\n  } else if (Platform.OS === 'android') {\n    invariant(!!notification.title, 'Local notifications on Android require a title');\n  }\n}\n\nlet ASYNC_STORAGE_PREFIX = '__expo_internal_channel_'; // TODO: remove this before releasing\n// this will always be `true` for SDK 28+\n\nlet IS_USING_NEW_BINARY = typeof ExponentNotifications.createChannel === 'function';\n\nasync function _legacyReadChannel(id) {\n  try {\n    let channelString = await AsyncStorage.getItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n\n    if (channelString) {\n      return JSON.parse(channelString);\n    }\n  } catch (e) {}\n\n  return null;\n}\n\nfunction _legacyDeleteChannel(id) {\n  return AsyncStorage.removeItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n}\n\nif (Platform.OS === 'android') {\n  AsyncStorage.clear = async function (callback) {\n    try {\n      let keys = await AsyncStorage.getAllKeys();\n      let result = null;\n\n      if (keys && keys.length) {\n        let filteredKeys = keys.filter(key => !key.startsWith(ASYNC_STORAGE_PREFIX));\n        await AsyncStorage.multiRemove(filteredKeys);\n      }\n\n      callback && callback();\n    } catch (e) {\n      callback && callback(e);\n      throw e;\n    }\n  };\n} // This codepath will never be triggered in SDK 28 and above\n// TODO: remove before releasing\n\n\nfunction _legacySaveChannel(id, channel) {\n  return AsyncStorage.setItem(`${ASYNC_STORAGE_PREFIX}${id}`, JSON.stringify(channel));\n}\n\nexport default {\n  /* Only used internally to initialize the notification from top level props */\n  _setInitialNotification(notification) {\n    _initialNotification = notification;\n  },\n\n  /* Re-export */\n  getExpoPushTokenAsync() {\n    return ExponentNotifications.getExponentPushTokenAsync();\n  },\n\n  getDevicePushTokenAsync: config => ExponentNotifications.getDevicePushTokenAsync(config || {}),\n\n  createChannelAndroidAsync(id, channel) {\n    if (Platform.OS === 'ios') {\n      console.warn('createChannelAndroidAsync(...) has no effect on iOS');\n      return Promise.resolve();\n    } // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n\n\n    if (!IS_USING_NEW_BINARY) {\n      return _legacySaveChannel(id, channel);\n    }\n\n    return ExponentNotifications.createChannel(id, channel);\n  },\n\n  deleteChannelAndroidAsync(id) {\n    if (Platform.OS === 'ios') {\n      console.warn('deleteChannelAndroidAsync(...) has no effect on iOS');\n      return Promise.resolve();\n    } // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n\n\n    if (!IS_USING_NEW_BINARY) {\n      return Promise.resolve();\n    }\n\n    return ExponentNotifications.deleteChannel(id);\n  },\n\n  /* Shows a notification instantly */\n  async presentLocalNotificationAsync(notification) {\n    _validateNotification(notification);\n\n    let nativeNotification = _processNotification(notification);\n\n    if (Platform.OS === 'ios') {\n      return ExponentNotifications.presentLocalNotification(nativeNotification);\n    } else {\n      let _channel;\n\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n\n        return ExponentNotifications.presentLocalNotificationWithChannel(nativeNotification, _channel);\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n\n        return ExponentNotifications.presentLocalNotification(nativeNotification);\n      }\n    }\n  },\n\n  /* Schedule a notification at a later date */\n  async scheduleLocalNotificationAsync(notification, options = {}) {\n    // set now at the beginning of the method, to prevent potential weird warnings when we validate\n    // options.time later on\n    const now = Date.now(); // Validate and process the notification data\n\n    _validateNotification(notification);\n\n    let nativeNotification = _processNotification(notification); // Validate `options.time`\n\n\n    if (options.time) {\n      let timeAsDateObj = null;\n\n      if (options.time && typeof options.time === 'number') {\n        timeAsDateObj = new Date(options.time);\n\n        if (timeAsDateObj.toString() === 'Invalid Date') {\n          timeAsDateObj = null;\n        }\n      } else if (options.time && options.time instanceof Date) {\n        timeAsDateObj = options.time;\n      } // If we couldn't convert properly, throw an error\n\n\n      if (!timeAsDateObj) {\n        throw new Error(`Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.`);\n      } // If someone passes in a value that is too small, say, by an order of 1000 (it's common to\n      // accidently pass seconds instead of ms), display a warning.\n\n\n      warning(timeAsDateObj.getTime() >= now, `Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?`); // If iOS, pass time as milliseconds\n\n      if (Platform.OS === 'ios') {\n        options = { ...options,\n          time: timeAsDateObj.getTime()\n        };\n      } else {\n        options = { ...options,\n          time: timeAsDateObj\n        };\n      }\n    }\n\n    if (options.intervalMs != null && options.repeat != null) {\n      throw new Error(`Pass either the \"repeat\" option or \"intervalMs\" option, not both`);\n    } // Validate options.repeat\n\n\n    if (options.repeat != null) {\n      const validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);\n\n      if (!validOptions.has(options.repeat)) {\n        throw new Error(`Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option`);\n      }\n    }\n\n    if (options.intervalMs != null) {\n      if (Platform.OS === 'ios') {\n        throw new Error(`The \"intervalMs\" option is not supported on iOS`);\n      }\n\n      if (options.intervalMs <= 0 || !Number.isInteger(options.intervalMs)) {\n        throw new Error(`Pass an integer greater than zero as the value for the \"intervalMs\" option`);\n      }\n    }\n\n    if (Platform.OS === 'ios') {\n      return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n    } else {\n      let _channel;\n\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n\n        return ExponentNotifications.scheduleLocalNotificationWithChannel(nativeNotification, options, _channel);\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n\n        return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n      }\n    }\n  },\n\n  /* Dismiss currently shown notification with ID (Android only) */\n  async dismissNotificationAsync(notificationId) {\n    if (Platform.OS === 'android') {\n      return ExponentNotifications.dismissNotification(notificationId);\n    } else {\n      throw new Error('Dismissing notifications is not supported on iOS');\n    }\n  },\n\n  /* Dismiss all currently shown notifications (Android only) */\n  async dismissAllNotificationsAsync() {\n    if (Platform.OS === 'android') {\n      return ExponentNotifications.dismissAllNotifications();\n    } else {\n      throw new Error('Dismissing notifications is not supported on iOS');\n    }\n  },\n\n  /* Cancel scheduled notification notification with ID */\n  cancelScheduledNotificationAsync(notificationId) {\n    return ExponentNotifications.cancelScheduledNotification(notificationId);\n  },\n\n  /* Cancel all scheduled notifications */\n  cancelAllScheduledNotificationsAsync() {\n    return ExponentNotifications.cancelAllScheduledNotifications();\n  },\n\n  /* Primary public api */\n  addListener(listener) {\n    _maybeInitEmitter();\n\n    if (_initialNotification) {\n      const initialNotification = _initialNotification;\n      _initialNotification = null;\n      setTimeout(() => {\n        _emitNotification(initialNotification);\n      }, 0);\n    }\n\n    return _emitter.addListener('notification', listener);\n  },\n\n  async getBadgeNumberAsync() {\n    if (!ExponentNotifications.getBadgeNumberAsync) {\n      return 0;\n    }\n\n    return ExponentNotifications.getBadgeNumberAsync();\n  },\n\n  async setBadgeNumberAsync(number) {\n    if (!ExponentNotifications.setBadgeNumberAsync) {\n      return;\n    }\n\n    return ExponentNotifications.setBadgeNumberAsync(number);\n  }\n\n};","map":{"version":3,"sources":["../src/Notifications.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, EventSubscription } from 'fbemitter';\nimport warning from 'fbjs/lib/warning';\nimport invariant from 'invariant';\nimport { AsyncStorage, DeviceEventEmitter, NativeModules, Platform } from 'react-native';\n\nconst { ExponentNotifications } = NativeModules;\n\ntype Notification = {\n  origin: 'selected' | 'received';\n  data: any;\n  remote: boolean;\n  isMultiple: boolean;\n};\n\ntype LocalNotification = {\n  title: string;\n  // How should we deal with body being required on iOS but not on Android?\n  body?: string;\n  data?: any;\n  ios?: {\n    sound?: boolean;\n  };\n  android?: {\n    channelId?: string;\n    icon?: string;\n    color?: string;\n    sticky?: boolean;\n    link?: string;\n    // DEPRECATED:\n    sound?: boolean;\n    vibrate?: boolean | number[];\n    priority: string;\n  };\n};\n\ntype Channel = {\n  name: string;\n  description?: string;\n  priority?: string;\n  sound?: boolean;\n  vibrate?: boolean | number[];\n  badge?: boolean;\n};\n\n// Android assigns unique number to each notification natively.\n// Since that's not supported on iOS, we generate an unique string.\ntype LocalNotificationId = string | number;\n\nlet _emitter;\nlet _initialNotification;\n\nfunction _maybeInitEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.notification', _emitNotification);\n  }\n}\n\nfunction _emitNotification(notification) {\n  if (typeof notification === 'string') {\n    notification = JSON.parse(notification);\n  }\n\n  /* Don't mutate the original notification */\n  notification = { ...notification };\n\n  if (typeof notification.data === 'string') {\n    try {\n      notification.data = JSON.parse(notification.data);\n    } catch (e) {\n      // It's actually just a string, that's fine\n    }\n  }\n\n  _emitter.emit('notification', notification);\n}\n\nfunction _processNotification(notification) {\n  notification = Object.assign({}, notification);\n\n  if (!notification.data) {\n    notification.data = {};\n  }\n\n  if (notification.hasOwnProperty('count')) {\n    delete notification.count;\n  }\n\n  // Delete any Android properties on iOS and merge the iOS properties on root notification object\n  if (Platform.OS === 'ios') {\n    if (notification.android) {\n      delete notification.android;\n    }\n\n    if (notification.ios) {\n      notification = Object.assign(notification, notification.ios);\n      delete notification.ios;\n    }\n  }\n\n  // Delete any iOS properties on Android and merge the Android properties on root notification\n  // object\n  if (Platform.OS === 'android') {\n    if (notification.ios) {\n      delete notification.ios;\n    }\n\n    if (notification.android) {\n      notification = Object.assign(notification, notification.android);\n      delete notification.android;\n    }\n  }\n\n  return notification;\n}\n\nfunction _validateNotification(notification) {\n  if (Platform.OS === 'ios') {\n    invariant(\n      !!notification.title && !!notification.body,\n      'Local notifications on iOS require both a title and a body'\n    );\n  } else if (Platform.OS === 'android') {\n    invariant(!!notification.title, 'Local notifications on Android require a title');\n  }\n}\n\nlet ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';\n// TODO: remove this before releasing\n// this will always be `true` for SDK 28+\nlet IS_USING_NEW_BINARY = typeof ExponentNotifications.createChannel === 'function';\n\nasync function _legacyReadChannel(id: string): Promise<Channel | null> {\n  try {\n    let channelString = await AsyncStorage.getItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n    if (channelString) {\n      return JSON.parse(channelString);\n    }\n  } catch (e) {}\n  return null;\n}\n\nfunction _legacyDeleteChannel(id: string): Promise<void> {\n  return AsyncStorage.removeItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n}\n\nif (Platform.OS === 'android') {\n  AsyncStorage.clear = async function(callback?: (error?: Error) => void): Promise<void> {\n    try {\n      let keys = await AsyncStorage.getAllKeys();\n      let result = null;\n      if (keys && keys.length) {\n        let filteredKeys = keys.filter(key => !key.startsWith(ASYNC_STORAGE_PREFIX));\n        await AsyncStorage.multiRemove(filteredKeys);\n      }\n      callback && callback();\n    } catch (e) {\n      callback && callback(e);\n      throw e;\n    }\n  };\n}\n\n// This codepath will never be triggered in SDK 28 and above\n// TODO: remove before releasing\nfunction _legacySaveChannel(id: string, channel: Channel): Promise<void> {\n  return AsyncStorage.setItem(`${ASYNC_STORAGE_PREFIX}${id}`, JSON.stringify(channel));\n}\n\nexport default {\n  /* Only used internally to initialize the notification from top level props */\n  _setInitialNotification(notification: Notification) {\n    _initialNotification = notification;\n  },\n\n  /* Re-export */\n  getExpoPushTokenAsync(): Promise<string> {\n    return ExponentNotifications.getExponentPushTokenAsync();\n  },\n\n  getDevicePushTokenAsync: (config: {\n    gcmSenderId?: string;\n  }): Promise<{ type: string; data: string }> =>\n    ExponentNotifications.getDevicePushTokenAsync(config || {}),\n\n  createChannelAndroidAsync(id: string, channel: Channel): Promise<void> {\n    if (Platform.OS === 'ios') {\n      console.warn('createChannelAndroidAsync(...) has no effect on iOS');\n      return Promise.resolve();\n    }\n    // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n    if (!IS_USING_NEW_BINARY) {\n      return _legacySaveChannel(id, channel);\n    }\n    return ExponentNotifications.createChannel(id, channel);\n  },\n\n  deleteChannelAndroidAsync(id: string): Promise<void> {\n    if (Platform.OS === 'ios') {\n      console.warn('deleteChannelAndroidAsync(...) has no effect on iOS');\n      return Promise.resolve();\n    }\n    // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n    if (!IS_USING_NEW_BINARY) {\n      return Promise.resolve();\n    }\n    return ExponentNotifications.deleteChannel(id);\n  },\n\n  /* Shows a notification instantly */\n  async presentLocalNotificationAsync(\n    notification: LocalNotification\n  ): Promise<LocalNotificationId> {\n    _validateNotification(notification);\n    let nativeNotification = _processNotification(notification);\n\n    if (Platform.OS === 'ios') {\n      return ExponentNotifications.presentLocalNotification(nativeNotification);\n    } else {\n      let _channel;\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n        return ExponentNotifications.presentLocalNotificationWithChannel(\n          nativeNotification,\n          _channel\n        );\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n        return ExponentNotifications.presentLocalNotification(nativeNotification);\n      }\n    }\n  },\n\n  /* Schedule a notification at a later date */\n  async scheduleLocalNotificationAsync(\n    notification: LocalNotification,\n    options: {\n      time?: Date | number;\n      repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n      intervalMs?: number;\n    } = {}\n  ): Promise<LocalNotificationId> {\n    // set now at the beginning of the method, to prevent potential weird warnings when we validate\n    // options.time later on\n    const now = Date.now();\n\n    // Validate and process the notification data\n    _validateNotification(notification);\n    let nativeNotification = _processNotification(notification);\n\n    // Validate `options.time`\n    if (options.time) {\n      let timeAsDateObj: Date | null = null;\n      if (options.time && typeof options.time === 'number') {\n        timeAsDateObj = new Date(options.time);\n        if (timeAsDateObj.toString() === 'Invalid Date') {\n          timeAsDateObj = null;\n        }\n      } else if (options.time && options.time instanceof Date) {\n        timeAsDateObj = options.time;\n      }\n\n      // If we couldn't convert properly, throw an error\n      if (!timeAsDateObj) {\n        throw new Error(\n          `Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.`\n        );\n      }\n\n      // If someone passes in a value that is too small, say, by an order of 1000 (it's common to\n      // accidently pass seconds instead of ms), display a warning.\n      warning(\n        timeAsDateObj.getTime() >= now,\n        `Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?`\n      );\n\n      // If iOS, pass time as milliseconds\n      if (Platform.OS === 'ios') {\n        options = {\n          ...options,\n          time: timeAsDateObj.getTime(),\n        };\n      } else {\n        options = {\n          ...options,\n          time: timeAsDateObj,\n        };\n      }\n    }\n\n    if (options.intervalMs != null && options.repeat != null) {\n      throw new Error(`Pass either the \"repeat\" option or \"intervalMs\" option, not both`);\n    }\n\n    // Validate options.repeat\n    if (options.repeat != null) {\n      const validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);\n      if (!validOptions.has(options.repeat)) {\n        throw new Error(\n          `Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option`\n        );\n      }\n    }\n\n    if (options.intervalMs != null) {\n      if (Platform.OS === 'ios') {\n        throw new Error(`The \"intervalMs\" option is not supported on iOS`);\n      }\n\n      if (options.intervalMs <= 0 || !Number.isInteger(options.intervalMs)) {\n        throw new Error(\n          `Pass an integer greater than zero as the value for the \"intervalMs\" option`\n        );\n      }\n    }\n\n    if (Platform.OS === 'ios') {\n      return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n    } else {\n      let _channel;\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n        return ExponentNotifications.scheduleLocalNotificationWithChannel(\n          nativeNotification,\n          options,\n          _channel\n        );\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n        return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n      }\n    }\n  },\n\n  /* Dismiss currently shown notification with ID (Android only) */\n  async dismissNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n    if (Platform.OS === 'android') {\n      return ExponentNotifications.dismissNotification(notificationId);\n    } else {\n      throw new Error('Dismissing notifications is not supported on iOS');\n    }\n  },\n\n  /* Dismiss all currently shown notifications (Android only) */\n  async dismissAllNotificationsAsync(): Promise<void> {\n    if (Platform.OS === 'android') {\n      return ExponentNotifications.dismissAllNotifications();\n    } else {\n      throw new Error('Dismissing notifications is not supported on iOS');\n    }\n  },\n\n  /* Cancel scheduled notification notification with ID */\n  cancelScheduledNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n    return ExponentNotifications.cancelScheduledNotification(notificationId);\n  },\n\n  /* Cancel all scheduled notifications */\n  cancelAllScheduledNotificationsAsync(): Promise<void> {\n    return ExponentNotifications.cancelAllScheduledNotifications();\n  },\n\n  /* Primary public api */\n  addListener(listener: Function): EventSubscription {\n    _maybeInitEmitter();\n\n    if (_initialNotification) {\n      const initialNotification = _initialNotification;\n      _initialNotification = null;\n      setTimeout(() => {\n        _emitNotification(initialNotification);\n      }, 0);\n    }\n\n    return _emitter.addListener('notification', listener);\n  },\n\n  async getBadgeNumberAsync(): Promise<number> {\n    if (!ExponentNotifications.getBadgeNumberAsync) {\n      return 0;\n    }\n    return ExponentNotifications.getBadgeNumberAsync();\n  },\n\n  async setBadgeNumberAsync(number: number): Promise<void> {\n    if (!ExponentNotifications.setBadgeNumberAsync) {\n      return;\n    }\n    return ExponentNotifications.setBadgeNumberAsync(number);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}