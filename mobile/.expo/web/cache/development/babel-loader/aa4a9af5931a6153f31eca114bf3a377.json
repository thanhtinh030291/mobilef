{"ast":null,"code":"import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { EventEmitter } from 'fbemitter';\nconst {\n  CTKNativeAdManager,\n  CTKNativeAdEmitter\n} = NativeModules;\nconst nativeAdEmitter = new NativeEventEmitter(CTKNativeAdEmitter);\nconst EVENT_DID_BECOME_VALID = 'AdsManagerDidBecomeValid';\n\nclass NativeAdsManager {\n  /**\n   * Creates an instance of AdsManager with a given placementId and adsToRequest.\n   * Default number of ads to request is `10`.\n   *\n   * AdsManager will become loading ads immediately\n   */\n  constructor(placementId, adsToRequest = 10) {\n    /** {@boolean} indicating whether AdsManager is ready to serve ads **/\n    this.isValid = false;\n    /** {@EventEmitter} used for sending out updates **/\n\n    this.eventEmitter = new EventEmitter();\n    this.placementId = placementId;\n    this.adsToRequest = adsToRequest;\n\n    this._listenForStateChanges();\n\n    CTKNativeAdManager.init(placementId, adsToRequest);\n  }\n\n  static async registerViewsForInteractionAsync(nativeAdViewTag, mediaViewTag, adIconViewTag, clickable) {\n    return await CTKNativeAdManager.registerViewsForInteraction(nativeAdViewTag, mediaViewTag, adIconViewTag, clickable);\n  }\n\n  static triggerEvent(nativeAdViewTag) {\n    return CTKNativeAdManager.triggerEvent(nativeAdViewTag);\n  }\n  /**\n   * Listens for AdManager state changes and updates internal state. When it changes,\n   * callers will be notified of a change\n   */\n\n\n  _listenForStateChanges() {\n    nativeAdEmitter.addListener('CTKNativeAdsManagersChanged', managers => {\n      const isValidNew = managers[this.placementId];\n      const isValid = this.isValid;\n\n      if (isValid !== isValidNew && isValidNew) {\n        this.isValid = true;\n        this.eventEmitter.emit(EVENT_DID_BECOME_VALID);\n      }\n    });\n  }\n  /**\n   * Used to listening for state changes\n   *\n   * If manager already became valid, it will call the function w/o registering\n   * handler for events\n   */\n\n\n  onAdsLoaded(listener) {\n    if (this.isValid) {\n      setImmediate(listener);\n      return {\n        remove: () => {}\n      };\n    }\n\n    return this.eventEmitter.once(EVENT_DID_BECOME_VALID, listener);\n  }\n  /**\n   * Disables auto refreshing for this native ad manager\n   */\n\n\n  disableAutoRefresh() {\n    CTKNativeAdManager.disableAutoRefresh(this.placementId);\n  }\n  /**\n   * Set the native ads manager caching policy. This controls which media from\n   * the native ads are cached before the onAdsLoaded is called.\n   * The default is to not block on caching.\n   */\n\n\n  setMediaCachePolicy(cachePolicy) {\n    CTKNativeAdManager.setMediaCachePolicy(this.placementId, cachePolicy);\n  }\n\n}\n\nexport default NativeAdsManager;","map":{"version":3,"sources":["../../src/facebook-ads/NativeAdsManager.tsx"],"names":[],"mappings":"AAAA,SAAS,kBAAT,EAA6B,aAA7B,QAAkD,cAAlD;AACA,SAAS,YAAT,QAAgD,WAAhD;AAEA,MAAM;AAAE,EAAA,kBAAF;AAAsB,EAAA;AAAtB,IAA6C,aAAnD;AAEA,MAAM,eAAe,GAAG,IAAI,kBAAJ,CAAuB,kBAAvB,CAAxB;AAEA,MAAM,sBAAsB,GAAG,0BAA/B;;AAIA,MAAM,gBAAN,CAAsB;AA+BpB;;;;;;AAMA,EAAA,WAAA,CAAY,WAAZ,EAAiC,YAAA,GAAuB,EAAxD,EAA0D;AA9B1D;AACA,SAAA,OAAA,GAAmB,KAAnB;AAEA;;AACA,SAAA,YAAA,GAA6B,IAAI,YAAJ,EAA7B;AA2BE,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,YAAL,GAAoB,YAApB;;AAEA,SAAK,sBAAL;;AAEA,IAAA,kBAAkB,CAAC,IAAnB,CAAwB,WAAxB,EAAqC,YAArC;AACD;;AA/BD,eAAa,gCAAb,CACE,eADF,EAEE,YAFF,EAGE,aAHF,EAIE,SAJF,EAIqB;AAEnB,WAAO,MAAM,kBAAkB,CAAC,2BAAnB,CACX,eADW,EAEX,YAFW,EAGX,aAHW,EAIX,SAJW,CAAb;AAMD;;AAED,SAAO,YAAP,CAAoB,eAApB,EAA2C;AACzC,WAAO,kBAAkB,CAAC,YAAnB,CAAgC,eAAhC,CAAP;AACD;AAiBD;;;;;;AAIA,EAAA,sBAAsB,GAAA;AACpB,IAAA,eAAe,CAAC,WAAhB,CAA4B,6BAA5B,EAA2D,QAAQ,IAAG;AACpE,YAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,WAAN,CAA3B;AACA,YAAM,OAAO,GAAG,KAAK,OAArB;;AAEA,UAAI,OAAO,KAAK,UAAZ,IAA0B,UAA9B,EAA0C;AACxC,aAAK,OAAL,GAAe,IAAf;AACA,aAAK,YAAL,CAAkB,IAAlB,CAAuB,sBAAvB;AACD;AACF,KARD;AASD;AAED;;;;;;;;AAMA,EAAA,WAAW,CAAC,QAAD,EAAqB;AAC9B,QAAI,KAAK,OAAT,EAAkB;AAChB,MAAA,YAAY,CAAC,QAAD,CAAZ;AACA,aAAO;AACL,QAAA,MAAM,EAAE,MAAK,CAAG;AADX,OAAP;AAGD;;AAED,WAAO,KAAK,YAAL,CAAkB,IAAlB,CAAuB,sBAAvB,EAA+C,QAA/C,CAAP;AACD;AAED;;;;;AAGA,EAAA,kBAAkB,GAAA;AAChB,IAAA,kBAAkB,CAAC,kBAAnB,CAAsC,KAAK,WAA3C;AACD;AAED;;;;;;;AAKA,EAAA,mBAAmB,CAAC,WAAD,EAAkC;AACnD,IAAA,kBAAkB,CAAC,mBAAnB,CAAuC,KAAK,WAA5C,EAAyD,WAAzD;AACD;;AA7FmB;;AAgGtB,eAAe,gBAAf","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nconst { CTKNativeAdManager, CTKNativeAdEmitter } = NativeModules;\n\nconst nativeAdEmitter = new NativeEventEmitter(CTKNativeAdEmitter);\n\nconst EVENT_DID_BECOME_VALID = 'AdsManagerDidBecomeValid';\n\ntype AdManagerCachePolicy = 'none' | 'icon' | 'image' | 'all';\n\nclass NativeAdsManager {\n  /** {@string} with placement id of ads **/\n  placementId: string;\n\n  /** {@number} of ads to request at once **/\n  adsToRequest: number;\n\n  /** {@boolean} indicating whether AdsManager is ready to serve ads **/\n  isValid: boolean = false;\n\n  /** {@EventEmitter} used for sending out updates **/\n  eventEmitter: EventEmitter = new EventEmitter();\n\n  static async registerViewsForInteractionAsync(\n    nativeAdViewTag: number,\n    mediaViewTag: number,\n    adIconViewTag: number,\n    clickable: number[]\n  ) {\n    return await CTKNativeAdManager.registerViewsForInteraction(\n      nativeAdViewTag,\n      mediaViewTag,\n      adIconViewTag,\n      clickable\n    );\n  }\n\n  static triggerEvent(nativeAdViewTag: number) {\n    return CTKNativeAdManager.triggerEvent(nativeAdViewTag);\n  }\n\n  /**\n   * Creates an instance of AdsManager with a given placementId and adsToRequest.\n   * Default number of ads to request is `10`.\n   *\n   * AdsManager will become loading ads immediately\n   */\n  constructor(placementId: string, adsToRequest: number = 10) {\n    this.placementId = placementId;\n    this.adsToRequest = adsToRequest;\n\n    this._listenForStateChanges();\n\n    CTKNativeAdManager.init(placementId, adsToRequest);\n  }\n\n  /**\n   * Listens for AdManager state changes and updates internal state. When it changes,\n   * callers will be notified of a change\n   */\n  _listenForStateChanges() {\n    nativeAdEmitter.addListener('CTKNativeAdsManagersChanged', managers => {\n      const isValidNew = managers[this.placementId];\n      const isValid = this.isValid;\n\n      if (isValid !== isValidNew && isValidNew) {\n        this.isValid = true;\n        this.eventEmitter.emit(EVENT_DID_BECOME_VALID);\n      }\n    });\n  }\n\n  /**\n   * Used to listening for state changes\n   *\n   * If manager already became valid, it will call the function w/o registering\n   * handler for events\n   */\n  onAdsLoaded(listener: () => void): EventSubscription {\n    if (this.isValid) {\n      setImmediate(listener);\n      return {\n        remove: () => {},\n      } as EventSubscription;\n    }\n\n    return this.eventEmitter.once(EVENT_DID_BECOME_VALID, listener);\n  }\n\n  /**\n   * Disables auto refreshing for this native ad manager\n   */\n  disableAutoRefresh() {\n    CTKNativeAdManager.disableAutoRefresh(this.placementId);\n  }\n\n  /**\n   * Set the native ads manager caching policy. This controls which media from\n   * the native ads are cached before the onAdsLoaded is called.\n   * The default is to not block on caching.\n   */\n  setMediaCachePolicy(cachePolicy: AdManagerCachePolicy) {\n    CTKNativeAdManager.setMediaCachePolicy(this.placementId, cachePolicy);\n  }\n}\n\nexport default NativeAdsManager;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}