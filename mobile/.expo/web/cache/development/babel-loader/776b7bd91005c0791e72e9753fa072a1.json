{"ast":null,"code":"import { NativeModules, Platform, Linking } from 'react-native';\nimport { Constants } from 'expo-constants';\n/*\n    * Platform must be iOS\n    * iOS 10.3 or greater\n    * `SKStoreReviewController` class is available\n*/\n\nexport function isSupported() {\n  return Platform.OS === 'ios' && NativeModules.ExponentStoreReview.isSupported;\n}\n/*\n    Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app.\n*/\n\nexport function requestReview() {\n  if (isSupported()) {\n    NativeModules.ExponentStoreReview.requestReview();\n  } else {\n    /*\n       If StoreReview is unavailable then get the store URL from the `app.json` and open to the store.\n    */\n    const url = storeUrl();\n\n    if (url) {\n      Linking.canOpenURL(url).then(supported => {\n        if (!supported) {\n          console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n          return;\n        } else {\n          return Linking.openURL(url);\n        }\n      }).catch(err => console.warn('Expo.StoreReview.requestReview(): Error opening link to store: ', err));\n    } else {\n      // If the store URL is missing, let the dev know.\n      console.log(\"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\");\n    }\n  }\n}\n/*\n    Get your app's store URLs from the `app.json`\n\n    * iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n    * Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n*/\n\nexport function storeUrl() {\n  const {\n    OS\n  } = Platform;\n\n  if (OS === 'ios') {\n    return Constants.manifest.ios.appStoreUrl;\n  } else if (OS === 'android') {\n    return Constants.manifest.android.playStoreUrl;\n  } else {\n    console.warn(`Expo.StoreReview.storeUrl(): Unsupported OS: ${OS}`);\n  }\n\n  return null;\n}\n/*\n    A flag to detect if this module can do anything\n*/\n\nexport function hasAction() {\n  return !!storeUrl() || isSupported();\n}","map":{"version":3,"sources":["../src/StoreReview.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,QAAxB,EAAkC,OAAlC,QAAiD,cAAjD;AACA,SAAS,SAAT,QAA0B,gBAA1B;AAEA;;;;;;AAKA,OAAM,SAAU,WAAV,GAAqB;AACzB,SAAO,QAAQ,CAAC,EAAT,KAAgB,KAAhB,IAAyB,aAAa,CAAC,mBAAd,CAAkC,WAAlE;AACD;AAED;;;;AAGA,OAAM,SAAU,aAAV,GAAuB;AAC3B,MAAI,WAAW,EAAf,EAAmB;AACjB,IAAA,aAAa,CAAC,mBAAd,CAAkC,aAAlC;AACD,GAFD,MAEO;AACL;;;AAGA,UAAM,GAAG,GAAG,QAAQ,EAApB;;AACA,QAAI,GAAJ,EAAS;AACP,MAAA,OAAO,CAAC,UAAR,CAAmB,GAAnB,EACG,IADH,CACQ,SAAS,IAAG;AAChB,YAAI,CAAC,SAAL,EAAgB;AACd,UAAA,OAAO,CAAC,GAAR,CAAY,0DAAZ,EAAwE,GAAxE;AACA;AACD,SAHD,MAGO;AACL,iBAAO,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAP;AACD;AACF,OARH,EASG,KATH,CASS,GAAG,IACR,OAAO,CAAC,IAAR,CAAa,iEAAb,EAAgF,GAAhF,CAVJ;AAYD,KAbD,MAaO;AACL;AACA,MAAA,OAAO,CAAC,GAAR,CACE,oKADF;AAGD;AACF;AACF;AAED;;;;;;;AAMA,OAAM,SAAU,QAAV,GAAkB;AACtB,QAAM;AAAE,IAAA;AAAF,MAAS,QAAf;;AACA,MAAI,EAAE,KAAK,KAAX,EAAkB;AAChB,WAAO,SAAS,CAAC,QAAV,CAAmB,GAAnB,CAAuB,WAA9B;AACD,GAFD,MAEO,IAAI,EAAE,KAAK,SAAX,EAAsB;AAC3B,WAAO,SAAS,CAAC,QAAV,CAAmB,OAAnB,CAA2B,YAAlC;AACD,GAFM,MAEA;AACL,IAAA,OAAO,CAAC,IAAR,CAAa,gDAAgD,EAAE,EAA/D;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;AAGA,OAAM,SAAU,SAAV,GAAmB;AACvB,SAAO,CAAC,CAAC,QAAQ,EAAV,IAAgB,WAAW,EAAlC;AACD","sourcesContent":["import { NativeModules, Platform, Linking } from 'react-native';\nimport { Constants } from 'expo-constants';\n\n/*\n    * Platform must be iOS\n    * iOS 10.3 or greater\n    * `SKStoreReviewController` class is available\n*/\nexport function isSupported() {\n  return Platform.OS === 'ios' && NativeModules.ExponentStoreReview.isSupported;\n}\n\n/*\n    Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app.\n*/\nexport function requestReview() {\n  if (isSupported()) {\n    NativeModules.ExponentStoreReview.requestReview();\n  } else {\n    /*\n       If StoreReview is unavailable then get the store URL from the `app.json` and open to the store.\n    */\n    const url = storeUrl();\n    if (url) {\n      Linking.canOpenURL(url)\n        .then(supported => {\n          if (!supported) {\n            console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n            return;\n          } else {\n            return Linking.openURL(url);\n          }\n        })\n        .catch(err =>\n          console.warn('Expo.StoreReview.requestReview(): Error opening link to store: ', err)\n        );\n    } else {\n      // If the store URL is missing, let the dev know.\n      console.log(\n        \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n      );\n    }\n  }\n}\n\n/*\n    Get your app's store URLs from the `app.json`\n\n    * iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n    * Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n*/\nexport function storeUrl() {\n  const { OS } = Platform;\n  if (OS === 'ios') {\n    return Constants.manifest.ios.appStoreUrl;\n  } else if (OS === 'android') {\n    return Constants.manifest.android.playStoreUrl;\n  } else {\n    console.warn(`Expo.StoreReview.storeUrl(): Unsupported OS: ${OS}`);\n  }\n  return null;\n}\n\n/*\n    A flag to detect if this module can do anything\n*/\nexport function hasAction() {\n  return !!storeUrl() || isSupported();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}