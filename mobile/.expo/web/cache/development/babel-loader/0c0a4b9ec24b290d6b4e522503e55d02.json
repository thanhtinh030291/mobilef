{"ast":null,"code":"import { NativeModules } from 'react-native';\nconst {\n  ExponentSecureStore\n} = NativeModules;\nexport const AFTER_FIRST_UNLOCK = ExponentSecureStore.AFTER_FIRST_UNLOCK;\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = ExponentSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport const ALWAYS = ExponentSecureStore.ALWAYS;\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = ExponentSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport const ALWAYS_THIS_DEVICE_ONLY = ExponentSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport const WHEN_UNLOCKED = ExponentSecureStore.WHEN_UNLOCKED;\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY = ExponentSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\nexport async function deleteItemAsync(key, options = {}) {\n  _ensureValidKey(key);\n\n  await ExponentSecureStore.deleteValueWithKeyAsync(key, options);\n}\nexport async function getItemAsync(key, options = {}) {\n  _ensureValidKey(key);\n\n  return await ExponentSecureStore.getValueWithKeyAsync(key, options);\n}\nexport async function setItemAsync(key, value, options = {}) {\n  _ensureValidKey(key);\n\n  if (!_isValidValue(value)) {\n    throw new Error(`Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`);\n  }\n\n  await ExponentSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\nfunction _ensureValidKey(key) {\n  if (!_isValidKey(key)) {\n    throw new Error(`Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`);\n  }\n}\n\nfunction _isValidKey(key) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value) {\n  return typeof value === 'string';\n}","map":{"version":3,"sources":["../src/SecureStore.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,QAA8B,cAA9B;AAEA,MAAM;AAAE,EAAA;AAAF,IAA0B,aAAhC;AAIA,OAAO,MAAM,kBAAkB,GAC7B,mBAAmB,CAAC,kBADf;AAEP,OAAO,MAAM,mCAAmC,GAC9C,mBAAmB,CAAC,mCADf;AAEP,OAAO,MAAM,MAAM,GAAkC,mBAAmB,CAAC,MAAlE;AACP,OAAO,MAAM,kCAAkC,GAC7C,mBAAmB,CAAC,kCADf;AAEP,OAAO,MAAM,uBAAuB,GAClC,mBAAmB,CAAC,uBADf;AAEP,OAAO,MAAM,aAAa,GAAkC,mBAAmB,CAAC,aAAzE;AACP,OAAO,MAAM,8BAA8B,GACzC,mBAAmB,CAAC,8BADf;AAQP,OAAO,eAAe,eAAf,CACL,GADK,EAEL,OAAA,GAA8B,EAFzB,EAE2B;AAEhC,EAAA,eAAe,CAAC,GAAD,CAAf;;AACA,QAAM,mBAAmB,CAAC,uBAApB,CAA4C,GAA5C,EAAiD,OAAjD,CAAN;AACD;AAED,OAAO,eAAe,YAAf,CACL,GADK,EAEL,OAAA,GAA8B,EAFzB,EAE2B;AAEhC,EAAA,eAAe,CAAC,GAAD,CAAf;;AACA,SAAO,MAAM,mBAAmB,CAAC,oBAApB,CAAyC,GAAzC,EAA8C,OAA9C,CAAb;AACD;AAED,OAAO,eAAe,YAAf,CACL,GADK,EAEL,KAFK,EAGL,OAAA,GAA8B,EAHzB,EAG2B;AAEhC,EAAA,eAAe,CAAC,GAAD,CAAf;;AACA,MAAI,CAAC,aAAa,CAAC,KAAD,CAAlB,EAA2B;AACzB,UAAM,IAAI,KAAJ,CACJ,6HADI,CAAN;AAGD;;AACD,QAAM,mBAAmB,CAAC,oBAApB,CAAyC,KAAzC,EAAgD,GAAhD,EAAqD,OAArD,CAAN;AACD;;AAED,SAAS,eAAT,CAAyB,GAAzB,EAAoC;AAClC,MAAI,CAAC,WAAW,CAAC,GAAD,CAAhB,EAAuB;AACrB,UAAM,IAAI,KAAJ,CACJ,0HADI,CAAN;AAGD;AACF;;AAED,SAAS,WAAT,CAAqB,GAArB,EAAgC;AAC9B,SAAO,OAAO,GAAP,KAAe,QAAf,IAA2B,YAAY,IAAZ,CAAiB,GAAjB,CAAlC;AACD;;AAED,SAAS,aAAT,CAAuB,KAAvB,EAAoC;AAClC,SAAO,OAAO,KAAP,KAAiB,QAAxB;AACD","sourcesContent":["import { NativeModules } from 'react-native';\n\nconst { ExponentSecureStore } = NativeModules;\n\nexport type KeychainAccessibilityConstant = number;\n\nexport const AFTER_FIRST_UNLOCK: KeychainAccessibilityConstant =\n  ExponentSecureStore.AFTER_FIRST_UNLOCK;\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport const ALWAYS: KeychainAccessibilityConstant = ExponentSecureStore.ALWAYS;\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport const ALWAYS_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport const WHEN_UNLOCKED: KeychainAccessibilityConstant = ExponentSecureStore.WHEN_UNLOCKED;\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExponentSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\n\nexport type SecureStoreOptions = {\n  keychainService?: string;\n  keychainAccessible?: KeychainAccessibilityConstant;\n};\n\nexport async function deleteItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n  await ExponentSecureStore.deleteValueWithKeyAsync(key, options);\n}\n\nexport async function getItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<string | null> {\n  _ensureValidKey(key);\n  return await ExponentSecureStore.getValueWithKeyAsync(key, options);\n}\n\nexport async function setItemAsync(\n  key: string,\n  value: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n  if (!_isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n  await ExponentSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\nfunction _ensureValidKey(key: string) {\n  if (!_isValidKey(key)) {\n    throw new Error(\n      `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`\n    );\n  }\n}\n\nfunction _isValidKey(key: string) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value: string) {\n  return typeof value === 'string';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}