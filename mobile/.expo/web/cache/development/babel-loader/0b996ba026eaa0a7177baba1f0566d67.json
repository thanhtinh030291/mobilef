{"ast":null,"code":"import { Constants } from 'expo-constants';\nimport qs from 'qs';\nimport Linking from './Linking';\nimport WebBrowser from './WebBrowser';\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(options) {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl); // Prevent accidentally starting to an empty url\n\n  if (!authUrl) {\n    throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n  } // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n\n\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n    }\n\n    return {\n      type: 'locked'\n    };\n  } // About to start session, set lock\n\n\n  _authLock = true;\n  let result;\n\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  } // Handle failures\n\n\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  let {\n    params,\n    errorCode\n  } = parseUrl(result.url);\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    url: result.url\n  };\n}\n\nfunction dismiss() {\n  WebBrowser.dismissAuthSession();\n}\n\nasync function _openWebBrowserAsync(startUrl, returnUrl) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  let result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl);\n\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return {\n      type: result.type\n    };\n  }\n\n  return result;\n}\n\nfunction getStartUrl(authUrl, returnUrl) {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl\n  });\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl() {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl() {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url) {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1]; // Get query string (?hello=world)\n\n  let parsedSearch = qs.parse(queryString); // Pull errorCode off of params\n\n  let {\n    errorCode\n  } = parsedSearch;\n  delete parsedSearch.errorCode; // Get hash (#abc=example)\n\n  let parsedHash = {};\n\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  } // Merge search and hash\n\n\n  let params = { ...parsedSearch,\n    ...parsedHash\n  };\n  return {\n    errorCode,\n    params\n  };\n}\n\nfunction _warnIfAnonymous(id, url) {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(`You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`);\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n\n  get getRedirectUri() {\n    console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');\n    return getRedirectUrl;\n  },\n\n  startAsync\n};","map":{"version":3,"sources":["../src/AuthSession.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,gBAA1B;AACA,OAAO,EAAP,MAAe,IAAf;AAEA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,UAAP,MAAuB,cAAvB;AAgBA,MAAM,QAAQ,GAAG,sBAAjB;AACA,IAAI,SAAS,GAAG,KAAhB;;AAEA,eAAe,UAAf,CAA0B,OAA1B,EAAqD;AACnD,QAAM,SAAS,GAAG,OAAO,CAAC,SAAR,IAAqB,mBAAmB,EAA1D;AACA,QAAM,OAAO,GAAG,OAAO,CAAC,OAAxB;AACA,QAAM,QAAQ,GAAG,WAAW,CAAC,OAAD,EAAU,SAAV,CAA5B,CAHmD,CAKnD;;AACA,MAAI,CAAC,OAAL,EAAc;AACZ,UAAM,IAAI,KAAJ,CACJ,wIADI,CAAN;AAGD,GAVkD,CAYnD;AACA;;;AACA,MAAI,SAAJ,EAAe;AACb,QAAI,OAAJ,EAAa;AACX,MAAA,OAAO,CAAC,IAAR,CACE,qIADF;AAGD;;AAED,WAAO;AAAE,MAAA,IAAI,EAAE;AAAR,KAAP;AACD,GAtBkD,CAwBnD;;;AACA,EAAA,SAAS,GAAG,IAAZ;AAEA,MAAI,MAAJ;;AACA,MAAI;AACF,IAAA,MAAM,GAAG,MAAM,oBAAoB,CAAC,QAAD,EAAW,SAAX,CAAnC;AACD,GAFD,SAEU;AACR;AACA,IAAA,SAAS,GAAG,KAAZ;AACD,GAjCkD,CAmCnD;;;AACA,MAAI,CAAC,MAAL,EAAa;AACX,UAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,MAAI,CAAC,MAAM,CAAC,GAAZ,EAAiB;AACf,QAAI,MAAM,CAAC,IAAX,EAAiB;AACf,aAAO,MAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF;;AAED,MAAI;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,MAAwB,QAAQ,CAAC,MAAM,CAAC,GAAR,CAApC;AAEA,SAAO;AACL,IAAA,IAAI,EAAE,SAAS,GAAG,OAAH,GAAa,SADvB;AAEL,IAAA,MAFK;AAGL,IAAA,SAHK;AAIL,IAAA,GAAG,EAAE,MAAM,CAAC;AAJP,GAAP;AAMD;;AAED,SAAS,OAAT,GAAgB;AACd,EAAA,UAAU,CAAC,kBAAX;AACD;;AAED,eAAe,oBAAf,CAAoC,QAApC,EAA8C,SAA9C,EAAuD;AACrD;AACA,MAAI,MAAM,GAAG,MAAM,UAAU,CAAC,oBAAX,CAAgC,QAAhC,EAA0C,SAA1C,CAAnB;;AACA,MAAI,MAAM,CAAC,IAAP,KAAgB,QAAhB,IAA4B,MAAM,CAAC,IAAP,KAAgB,SAAhD,EAA2D;AACzD,WAAO;AAAE,MAAA,IAAI,EAAE,MAAM,CAAC;AAAf,KAAP;AACD;;AAED,SAAO,MAAP;AACD;;AAED,SAAS,WAAT,CAAqB,OAArB,EAAsC,SAAtC,EAAuD;AACrD,MAAI,WAAW,GAAG,EAAE,CAAC,SAAH,CAAa;AAC7B,IAAA,OAD6B;AAE7B,IAAA;AAF6B,GAAb,CAAlB;AAKA,SAAO,GAAG,cAAc,EAAE,UAAU,WAAW,EAA/C;AACD;;AAED,SAAS,cAAT,GAAuB;AACrB,QAAM,WAAW,GAAG,GAAG,QAAQ,IAAI,SAAS,CAAC,QAAV,CAAmB,EAAE,EAAxD;;AACA,MAAI,OAAJ,EAAa;AACX,IAAA,gBAAgB,CAAC,SAAS,CAAC,QAAV,CAAmB,EAApB,EAAwB,WAAxB,CAAhB;AACD;;AACD,SAAO,WAAP;AACD;;AAED,SAAS,mBAAT,GAA4B;AAC1B,SAAO,OAAO,CAAC,OAAR,CAAgB,mBAAhB,CAAP;AACD;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAA6B;AAC3B,MAAI,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,CAAZ;AACA,MAAI,IAAI,GAAG,KAAK,CAAC,CAAD,CAAhB;AACA,MAAI,gBAAgB,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,GAAf,CAAvB;AACA,MAAI,WAAW,GAAG,gBAAgB,CAAC,gBAAgB,CAAC,MAAjB,GAA0B,CAA3B,CAAlC,CAJ2B,CAM3B;;AACA,MAAI,YAAY,GAAG,EAAE,CAAC,KAAH,CAAS,WAAT,CAAnB,CAP2B,CAS3B;;AACA,MAAI;AAAE,IAAA;AAAF,MAAgB,YAApB;AACA,SAAO,YAAY,CAAC,SAApB,CAX2B,CAa3B;;AACA,MAAI,UAAU,GAAG,EAAjB;;AACA,MAAI,KAAK,CAAC,CAAD,CAAT,EAAc;AACZ,IAAA,UAAU,GAAG,EAAE,CAAC,KAAH,CAAS,IAAT,CAAb;AACD,GAjB0B,CAmB3B;;;AACA,MAAI,MAAM,GAAG,EACX,GAAG,YADQ;AAEX,OAAG;AAFQ,GAAb;AAKA,SAAO;AACL,IAAA,SADK;AAEL,IAAA;AAFK,GAAP;AAID;;AAED,SAAS,gBAAT,CAA0B,EAA1B,EAA8B,GAA9B,EAAiC;AAC/B,MAAI,EAAE,CAAC,UAAH,CAAc,aAAd,CAAJ,EAAkC;AAChC,IAAA,OAAO,CAAC,IAAR,CACE,+HAA+H,GAAG,yTADpI;AAGD;AACF;;AAED,eAAe;AACb,EAAA,OADa;AAEb,EAAA,cAFa;AAGb,EAAA,WAHa;AAIb,EAAA,mBAJa;;AAKb,MAAI,cAAJ,GAAkB;AAChB,IAAA,OAAO,CAAC,IAAR,CACE,4FADF;AAGA,WAAO,cAAP;AACD,GAVY;;AAWb,EAAA;AAXa,CAAf","sourcesContent":["import { Constants } from 'expo-constants';\nimport qs from 'qs';\n\nimport Linking from './Linking';\nimport WebBrowser from './WebBrowser';\n\ntype AuthSessionOptions = {\n  authUrl: string,\n  returnUrl?: string,\n};\n\ntype AuthSessionResult =\n  | { type: 'cancel' | 'dismiss' | 'locked' }\n  | {\n      type: 'error' | 'success',\n      errorCode: string | null,\n      params: Object,\n      url: string,\n    };\n\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl);\n\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  let { params, errorCode } = parseUrl(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    url: result.url,\n  };\n}\n\nfunction dismiss() {\n  WebBrowser.dismissAuthSession();\n}\n\nasync function _openWebBrowserAsync(startUrl, returnUrl) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  let result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl);\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nfunction getStartUrl(authUrl: string, returnUrl: string): string {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl,\n  });\n\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl(): string {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl(): string {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url: string): { errorCode: string | null, params: Object } {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  let parsedSearch = qs.parse(queryString);\n\n  // Pull errorCode off of params\n  let { errorCode } = parsedSearch;\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  let params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction _warnIfAnonymous(id, url): void {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\n      `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n    );\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn(\n      'Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)'\n    );\n    return getRedirectUrl;\n  },\n  startAsync,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}