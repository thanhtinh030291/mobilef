{"ast":null,"code":"import AnimatedValue from '../core/AnimatedValue';\nimport { block, call, always, cond, set } from '../base';\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param children - children (or one child) nodes to be notified\n * @param callback - after callback\n */\n\nexport function evaluateOnce(node, children = [], callback) {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n\n  const done = new AnimatedValue(0);\n  const evalNode = cond(done, 0, call([node, set(done, 1)], () => {\n    callback && callback();\n\n    for (let i = 0; i < children.length; i++) {\n      alwaysNode.__removeChild(children[i]);\n    }\n  }));\n  const alwaysNode = always(evalNode);\n\n  for (let i = 0; i < children.length; i++) {\n    alwaysNode.__addChild(children[i]);\n  }\n}","map":{"version":3,"sources":["C:/xampp/htdocs/app/mobile/node_modules/react-native-reanimated/src/derived/evaluateOnce.js"],"names":["AnimatedValue","block","call","always","cond","set","evaluateOnce","node","children","callback","Array","isArray","done","evalNode","i","length","alwaysNode","__removeChild","__addChild"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,uBAA1B;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,GAApC,QAA+C,SAA/C;AAEA;;;;;;;AAMA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,QAAQ,GAAG,EAAvC,EAA2CC,QAA3C,EAAqD;AAC1D,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAL,EAA8B;AAC5BA,IAAAA,QAAQ,GAAG,CAACA,QAAD,CAAX;AACD;;AACD,QAAMI,IAAI,GAAG,IAAIZ,aAAJ,CAAkB,CAAlB,CAAb;AACA,QAAMa,QAAQ,GAAGT,IAAI,CACnBQ,IADmB,EAEnB,CAFmB,EAGnBV,IAAI,CAAC,CAACK,IAAD,EAAOF,GAAG,CAACO,IAAD,EAAO,CAAP,CAAV,CAAD,EAAuB,MAAM;AAC/BH,IAAAA,QAAQ,IAAIA,QAAQ,EAApB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACO,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCE,MAAAA,UAAU,CAACC,aAAX,CAAyBT,QAAQ,CAACM,CAAD,CAAjC;AACD;AACF,GALG,CAHe,CAArB;AAUA,QAAME,UAAU,GAAGb,MAAM,CAACU,QAAD,CAAzB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACO,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCE,IAAAA,UAAU,CAACE,UAAX,CAAsBV,QAAQ,CAACM,CAAD,CAA9B;AACD;AACF","sourcesContent":["import AnimatedValue from '../core/AnimatedValue';\nimport { block, call, always, cond, set } from '../base';\n\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param children - children (or one child) nodes to be notified\n * @param callback - after callback\n */\nexport function evaluateOnce(node, children = [], callback) {\n  if (!Array.isArray(children)) {\n    children = [children];\n  }\n  const done = new AnimatedValue(0);\n  const evalNode = cond(\n    done,\n    0,\n    call([node, set(done, 1)], () => {\n      callback && callback();\n      for (let i = 0; i < children.length; i++) {\n        alwaysNode.__removeChild(children[i]);\n      }\n    })\n  );\n  const alwaysNode = always(evalNode);\n  for (let i = 0; i < children.length; i++) {\n    alwaysNode.__addChild(children[i]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}